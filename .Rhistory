pointSize = 2,
labSize = 4,
legendPosition = 'right',
legendLabSize = 10,
legendIconSize = 3.0,
max.overlaps = 10,
drawConnectors = TRUE,
widthConnectors = 1.0,
colConnectors = 'black',
boxedLabels = TRUE
)
suppressPackageStartupMessages( library( "GEOquery" ) )
library( "airway" )
BiocManager::install("airway")
library( "airway" )
browseVignettes("airway")
??airway
dir <- system.file("extdata", package="airway")
geo <- file.path(dir, "GSE52778_series_matrix.txt")
geo <- file.path(dir, "GSE52778_series_matrix.txt")
gse <- getGEO(filename = geo)
View(gse)
View(gse)
gse@assayData[["exprs"]]
gse@featureData@varMetadata[["Description"]]
gse
data(airway)
airway
as.data.frame(colData(airway))
View(airway)
as.data.frame(colData(airway))
summary(colSums(assay(airway))/1e6)
summary(colSums(assay(airway)))
summary(colSums(assay(airway))/1e6)
metadata(rowRanges(airway))
styler:::style_active_file()
pdata <- pData(gse)[, grepl("ch1", names(pData(gse)))]
View(pdata)
names(pdata) <- c("treatment", "tissue", "ercc_mix", "cell", "celltype")
View(pdata)
pdataclean <- data.frame(
treatment = sub("treatment: (.*)", "\\1", pdata$treatment),
cell = sub("cell line: (.*)", "\\1", pdata$cell),
row.names = rownames(pdata)
)
View(pdataclean)
pdataclean$dex <- ifelse(grepl("Dex", pdataclean$treatment), "trt", "untrt")
pdataclean$albut <- ifelse(grepl("Albut", pdataclean$treatment), "trt", "untrt")
pdataclean$SampleName <- rownames(pdataclean)
pdataclean$treatment <- NULL
pdata <- pData(gse)[, grepl("ch1", names(pData(gse)))]
names(pdata) <- c("treatment", "tissue", "ercc_mix", "cell", "celltype")
pdataclean <- data.frame(
treatment = sub("treatment: (.*)", "\\1", pdata$treatment),
cell = sub("cell line: (.*)", "\\1", pdata$cell),
row.names = rownames(pdata)
)
pdataclean$dex <- ifelse(grepl("Dex", pdataclean$treatment), "trt", "untrt")
pdataclean$albut <- ifelse(grepl("Albut", pdataclean$treatment), "trt", "untrt")
pdataclean$SampleName <- rownames(pdataclean)
dir <- system.file("extdata",package="airway")
geofile <- file.path(dir, "GSE52778_series_matrix.txt")
gse <- getGEO(filename=geofile)
pdata <- pData(gse)[,grepl("ch1",names(pData(gse)))]
names(pdata) <- c("treatment","tissue","ercc_mix","cell","celltype")
pdataclean <- data.frame(treatment=sub("treatment: (.*)","\\1",pdata$treatment),
cell=sub("cell line: (.*)","\\1",pdata$cell),
row.names=rownames(pdata))
pdataclean$dex <- ifelse(grepl("Dex",pdataclean$treatment),"trt","untrt")
pdataclean$albut <- ifelse(grepl("Albut",pdataclean$treatment),"trt","untrt")
pdataclean$SampleName <- rownames(pdataclean)
pdataclean$treatment <- NULL
View(pdataclean)
srafile <- file.path(dir, "SraRunInfo_SRP033351.csv")
srp <- read.csv(srafile)
srpsmall <- srp[,c("Run","avgLength","Experiment","Sample","BioSample","SampleName")]
View(srp)
View(srpsmall)
rownames(coldata) <- coldata$Run
coldata <- merge(pdataclean, srpsmall, by="SampleName")
rownames(coldata) <- coldata$Run
coldata <- coldata[coldata$albut == "untrt",]
coldata$albut <- NULL
coldata
View(coldata)
write.csv(coldata, file="sample_table.csv")
rowData(airway)
library(AnnotationHub)
library(ensembldb)
#collection of genomic annotations
library(AnnotationHub)
#create an AnnotationHub object, to retrieve annotations
ah <- AnnotationHub()
#create an AnnotationHub object, to retrieve annotations
ah <- AnnotationHub()
#collection of genomic annotations
library(AnnotationHub)
#create an AnnotationHub object, to retrieve annotations
ah <- AnnotationHub()
#create an AnnotationHub object, to retrieve annotations
aha <- AnnotationHub()
#human genomic annotations to Gtf object
Gtf <- query(ah, c("Homo sapiens", "release-75"))[1]
#create AnnotationHub object, to retrieve annotations
ah <- AnnotationHub()
?AnnotationHub
#create AnnotationHub object, to retrieve annotations
ah = AnnotationHub()
ah = AnnotationHub()
library(AnnotationHub)
ah = AnnotationHub()
BiocManager::install("AnnotationHub")
BiocManager::install("AnnotationHub", force = TRUE)
library(AnnotationHub)
ah <- AnnotationHub()
??DESeq2
library("DESeq2")
ddsSE <- DESeqDataSet(se, design = ~ cell + dex)
ddsSE <- DESeqDataSet(airway, design = ~ cell + dex)
ddsSE
dds <- DESeqDataSet(airway, design = ~ cell + dex)
dds
View(dds)
dds$condition <- factor(dds$condition, levels = c("untreated","treated"))
dds$condition <- factor(dds$condition, levels = c("untreated","treated"))
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
dds$condition <- factor(dds$condition, levels = c("untreated","treated"))
dds <- DESeqDataSet(airway, design = ~ cell + dex)
dds
resultsNames(dds)
dds$condition <- factor(dds$condition, levels = c("untreated","treated"))
dds$condition <- relevel(dds$condition, ref = "untreated")
dds$condition
se <- airway
se
assays(se)$counts
metadata(rowRanges(airway))
rowRanges(airway)
colData(airway)
colData <- as.data.frame(colData(airway))
View(colData)
counts <- assays(se)$counts
counts <- as.data.frame(assays(se)$counts)
View(counts)
#extract metadata
colData <- as.data.frame(colData(se))
summary(colSums(assay(se)) / 1e6)
rowRanges(se)
metadata(rowRanges(se))
metadata(se)
abstract(se)
??metadata
library(SummarizedExperiment)
??SummarizedExperiment::metadata
metadata(se)$abstract
metadata(se$abstract)
se$abstract
View(se)
se@metadata[[1]]@abstract
se@metadata[[1]]@title
#Introduction
metadata(se)
se@colData@rownames
len(se@colData@rownames)
length(se@colData@rownames)
se@assays
metadata(rowRanges(se))
rowRanges(se)
#extract metadata
colData <- as.data.frame(colData(se))
assays(se)$counts
#Sum of genes
length(assays(se)$counts)
summary(colSums(assay(se)) / 1e6)
colSums(assay(se)) / 1e6
summary(colSums(assay(se)))
rowRanges(se)
metadata(rowRanges(se))
BiocManager::install("iSEE")
library(iSEE)
iSEE(se)
BiocManager::install("iSEEde")
library(iSEEde)
BiocManager::install("iSEEde")
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install("iSEEde")
devtools::install_github("Bioconductor/BiocManager", ref="ghost-binary-repo")
BiocManager::install("iSEEde")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.19")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.18")
BiocManager::install("iSEEde")
library(iSEEde)
airway$dex <- relevel(airway$dex, "untrt")
View(airway)
dds <- DESeqDataSet(airway, ~ 0 + dex + cell)
dds <- DESeq(dds)
res_deseq2 <- results(dds, contrast = list("dextrt", "dexuntrt"))
head(res_deseq2)
contrastResults(airway)
airway <- embedContrastResults(res_deseq2, airway, name = "dex: trt vs untrt")
contrastResults(airway)
if (interactive()) {
shiny::runApp(app)
}
app <- iSEE(airway, initial = list(
DETable(ContrastName="dex: trt vs untrt", HiddenColumns = c("baseMean",
"lfcSE", "stat"), PanelWidth = 4L),
VolcanoPlot(ContrastName="dex: trt vs untrt", PanelWidth = 4L),
MAPlot(ContrastName="dex: trt vs untrt", PanelWidth = 4L)
))
if (interactive()) {
shiny::runApp(app)
}
BiocManager::install("iSEEpathways")
library("org.Hs.eg.db")
library("org.Hs.eg.db")
library(org.Hs.eg.db)
library(org.Hs.eg.db)
BiocManager::install("org.Hs.eg.db")
library(org.Hs.eg.db)
options(connectionObserver = NULL)
library(org.Hs.eg.db)
library(org.Hs.eg.db)
suppressPackageStartupMessages(library("GEOquery"))
suppressPackageStartupMessages(library("airway"))
library(DESeq2)
library(iSEE)
library(iSEEde)
library(org.Hs.eg.db)
library("scater")
BiocManager::install("scater")
library(scater)
BiocManager::install("scuttle")
library(scater)
library(scuttle)
BiocManager::install("DelayedArray")
library(scuttle)
??BiocManager::install()
BiocManager::install("iSEEpathways")
library(org.Hs.eg.db)
library(scater)
library("org.Hs.eg.db")
library("scater")
library("scuttle")
install_package("DelayedArray", version = "0.27.2")
BiocManager::install("DelayedArray", version = "0.27.2")
BiocManager::install("DelayedArray", version = "27.2")
BiocManager::install("DelayedArray", version = "0.27")
BiocManager::install("DelayedArray")
BiocManager::install("DelayedArray", version = "3.18")
library("scater")
library("scuttle")
remove.packages("DelayedArray")
BiocManager::install("DelayedArray", version = "3.18")
library("scater")
BiocManager::install("DelayedArray")
library(DelayedArray)
library("org.Hs.eg.db")
library("scater")
BiocManager::install("DelayedArray")
library("scater")
suppressPackageStartupMessages(library("GEOquery"))
suppressPackageStartupMessages(library("airway"))
BiocManager::install("S4Arrays")
suppressPackageStartupMessages(library("airway"))
suppressPackageStartupMessages(library("GEOquery"))
suppressPackageStartupMessages(library("airway"))
remove.packages("S4Arrays")
suppressPackageStartupMessages(library("GEOquery"))
suppressPackageStartupMessages(library("airway"))
BiocManager::install("S4Arrays")
suppressPackageStartupMessages(library("GEOquery"))
suppressPackageStartupMessages(library("airway"))
library(DESeq2)
library(iSEE)
library(iSEEde)
library("org.Hs.eg.db")
library("scater")
library("scuttle")
data(airway)
airway
se <- airway
se
#extract counts
counts <- as.data.frame(assays(se)$counts)
#extract metadata
colData <- as.data.frame(colData(se))
#Count stats
summary(colSums(assay(se)) / 1e6)
#Introduction
metadata(se)
#Title
se@metadata[[1]]@title
#Abstract
se@metadata[[1]]@abstract
#Sample names
se@colData@rownames
#Sum of sampes
length(se@colData@rownames)
#Sum of genes
length(assays(se)$counts)
#Genome information
metadata(rowRanges(se))
dds <- DESeqDataSet(se, design = ~ cell + dex)
dds
rowData(airway)[["ENSEMBL"]] <- rownames(airway)
View(airway)
airway$dex <- relevel(airway$dex, "untrt")
rowData(airway)[["ENSEMBL"]] <- rownames(airway)
rowData(airway)[["SYMBOL"]] <- mapIds(org.Hs.eg.db, rownames(airway), "SYMBOL", "ENSEMBL")
rowData(airway)[["uniquifyFeatureNames"]] <- uniquifyFeatureNames(
ID = rowData(airway)[["ENSEMBL"]],
names = rowData(airway)[["SYMBOL"]]
)
rownames(airway) <- rowData(airway)[["uniquifyFeatureNames"]]
airway <- logNormCounts(airway)
counts <- assay(airway, "counts")
design <- model.matrix(~ 0 + dex + cell, data = colData(airway))
keep <- filterByExpr(counts, design)
library("edgeR")
counts <- assay(airway, "counts")
design <- model.matrix(~ 0 + dex + cell, data = colData(airway))
keep <- filterByExpr(counts, design)
v <- voom(counts[keep,], design, plot=FALSE)
fit <- lmFit(v, design)
contr <- makeContrasts("dextrt - dexuntrt", levels = colnames(coef(fit)))
tmp <- contrasts.fit(fit, contr)
tmp <- eBayes(tmp)
res_limma <- topTable(tmp, sort.by = "P", n = Inf)
head(res_limma)
airway <- iSEEde::embedContrastResults(res_limma, airway, name = "Limma-Voom", class = "limma")
library("iSEEde")
airway <- iSEEde::embedContrastResults(res_limma, airway, name = "Limma-Voom", class = "limma")
rowData(airway)
pathways <- select(org.Hs.eg.db, keys(org.Hs.eg.db, "ENSEMBL"), c("GOALL"), keytype = "ENSEMBL")
pathways <- subset(pathways, ONTOLOGYALL == "BP")
pathways <- unique(pathways[, c("ENSEMBL", "GOALL")])
pathways <- merge(pathways, rowData(airway)[, c("ENSEMBL", "uniquifyFeatureNames")])
pathways <- split(pathways$uniquifyFeatureNames, pathways$GOALL)
map_GO <- function(pathway_id, se) {
pathway_ensembl <- mapIds(org.Hs.eg.db, pathway_id, "ENSEMBL", keytype = "GOALL", multiVals = "CharacterList")[[pathway_id]]
pathway_rownames <- rownames(se)[rowData(se)[["gene_id"]] %in% pathway_ensembl]
pathway_rownames
}
airway <- registerAppOptions(airway, Pathways.map.functions = list(GO = map_GO))
library("fgsea")
set.seed(42)
stats <- na.omit(log2FoldChange(contrastResults(airway, "Limma-Voom")))
fgseaRes <- fgsea(pathways = pathways,
stats    = stats,
minSize  = 15,
maxSize  = 500)
head(fgseaRes[order(pval), ])
library("iSEEpathways")
fgseaRes <- fgseaRes[order(pval), ]
airway <- embedPathwaysResults(
fgseaRes, airway, name = "fgsea (p-value)", class = "fgsea",
pathwayType = "GO", pathwaysList = pathways, featuresStats = stats)
airway
stats <- na.omit(
log2FoldChange(contrastResults(airway, "Limma-Voom")) *
-log10(pValue(contrastResults(airway, "Limma-Voom")))
)
set.seed(42)
fgseaRes <- fgsea(pathways = pathways,
stats    = na.omit(stats),
minSize  = 15,
maxSize  = 500)
fgseaRes <- fgseaRes[order(pval), ]
airway <- embedPathwaysResults(
fgseaRes, airway, name = "fgsea (p-value & fold-change)", class = "fgsea",
pathwayType = "GO", pathwaysList = pathways, featuresStats = stats)
airway
#Displaying additional pathway information
library("GO.db")
library("shiny")
library("iSEE")
go_details <- function(x) {
info <- select(GO.db, x, c("TERM", "ONTOLOGY", "DEFINITION"), "GOID")
html <- list(p(strong(info$GOID), ":", info$TERM, paste0("(", info$ONTOLOGY, ")")))
if (!is.na(info$DEFINITION)) {
html <- append(html, list(p(info$DEFINITION)))
}
tagList(html)
}
airway <- registerAppOptions(airway, PathwaysTable.select.details = go_details)
#Live app
app <- iSEE(airway, initial = list(
PathwaysTable(ResultName="fgsea (p-value)", Selected = "GO:0046324", PanelWidth = 4L),
VolcanoPlot(RowSelectionSource = "PathwaysTable1", ColorBy = "Row selection", PanelWidth = 4L),
ComplexHeatmapPlot(RowSelectionSource = "PathwaysTable1",
PanelWidth = 4L, PanelHeight = 700L,
CustomRows = FALSE, ColumnData = "dex",
ClusterRows = TRUE, ClusterRowsDistance = "euclidean", AssayCenterRows = TRUE),
FgseaEnrichmentPlot(ResultName="fgsea (p-value)", PathwayId = "GO:0046324", PanelWidth = 12L)
))
if (interactive()) {
shiny::runApp(app)
}
iSEE(se)
#extract counts
counts <- as.data.frame(assays(se)$counts)
#extract metadata
colData <- as.data.frame(colData(se))
View(counts)
View(colData)
all(colnames(counts) %in% row.names(coldata))
all(colnames(counts) %in% row.names(colData))
all(colnames(counts) == row.names(colData))
View(colData)
# Define design matrix for DESeq2
ddsSub <- DESeqDataSetFromMatrix(
countData = counts,
colData = colData,
design = ~ cell + dex
)
# Define design matrix for DESeq2
dds <- DESeqDataSetFromMatrix(
countData = counts,
colData = colData,
design = ~ cell + dex
)
View(dds)
# normalization by estimating size factor
dds <- estimateSizeFactors(dds)
# remove low expressed genes
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep, ]
# set factor level (reference group) : Im interested in comparing copd and smokers to the reference group non-smokers in this case.
dds$patient_group <- relevel(dds$patient_group, ref = "untrt")
??DESeq2
dds$condition
# set factor level (reference group) : Im interested in comparing copd and smokers to the reference group non-smokers in this case.
dds$patient_group <- relevel(dds$dex, ref = "untrt")
dds$patient_group
dds$condition
# Define design matrix for DESeq2
dds <- DESeqDataSetFromMatrix(
countData = counts,
colData = colData,
design = ~ cell + dex
)
# normalization by estimating size factor
dds <- estimateSizeFactors(dds)
# remove low expressed genes
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep, ]
# set factor level (reference group) : Im interested in comparing copd and smokers to the reference group non-smokers in this case.
dds$condition <- relevel(dds$condition, ref = "untreated")
# set factor level (reference group) : Im interested in comparing copd and smokers to the reference group non-smokers in this case.
dds$condition <- relevel(dds$condition, ref = "untrt")
# set factor level (reference group) : Im interested in comparing copd and smokers to the reference group non-smokers in this case.
dds$condition <- relevel(dds$condition, ref = "untrt")
dds$condition <- factor(dds$condition, levels = c("untreated","treated"))
#Ensure matching sample names & order
all(colnames(counts) %in% row.names(colData))
all(colnames(counts) == row.names(colData))
# Define design matrix for DESeq2
dds <- DESeqDataSetFromMatrix(
countData = counts,
colData = colData,
design = ~ cell + dex
)
# normalization by estimating size factor
dds <- estimateSizeFactors(dds)
# remove low expressed genes
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep, ]
# set factor level (reference group) : Im interested in comparing copd and smokers to the reference group non-smokers in this case.
dds$condition <- relevel(dds$condition, ref = "untrt")
dds$dex
# set factor level (reference group) : Im interested in comparing copd and smokers to the reference group non-smokers in this case.
dds$dex <- relevel(dds$dex, ref = "untrt")
dds$dex
# Run DEG analysis
dds <- DESeq(dds)
res <- results(dds)
res
resultsNames(dds)
# Define design matrix for DESeq2
dds <- DESeqDataSetFromMatrix(
countData = counts,
colData = colData,
design = ~ dex
)
# normalization by estimating size factor
dds <- estimateSizeFactors(dds)
# remove low expressed genes
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep, ]
# set factor level (reference group) : Im interested in comparing copd and smokers to the reference group non-smokers in this case.
dds$dex <- relevel(dds$dex, ref = "untrt")
# Run DEG analysis
dds <- DESeq(dds)
res <- results(dds)
res
resultsNames(dds)
sum(res$padj < 0.05, na.rm=TRUE)
sum(res$padj < 0.005, na.rm=TRUE)
sum(res$padj < 0.05, na.rm=TRUE)
resLFC <- lfcShrink(dds, coef=2, type="apeglm")
plotMA(resLFC, xlim=xlim, ylim=ylim, main="apeglm")
xlim <- c(1,1e5); ylim <- c(-3,3)
plotMA(resLFC, xlim=xlim, ylim=ylim, main="apeglm")
resLFC <- lfcShrink(dds, type="apeglm")
