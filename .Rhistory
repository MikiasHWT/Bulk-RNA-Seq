caption = (gsub(".*\\(MLE\\):\\s*", "", result@elementMetadata@listData[["description"]][2]))) # Label plots
plots[[i]] <- p_plot
}
do.call(grid.arrange, c(plots, nrow = 2))
}
res_list <- list(
"1 Var: dex_trt_vs_untrt" = resLFC1,
"2 Var: dex_trt_vs_untrt" = resLFC2,
"2 Var: cell_N061011_vs_N052611" = resLFC2a,
"2 Var: N080611_vs_N052611" = resLFC2b,
"2 Var: N61311_vs_N052611" = resLFC2c
)
plotMA_arrange_iterative(res_list)
res2@elementMetadata@listData[["description"]][2]
(gsub(".*\\(MLE\\):\\s*", "", res2@elementMetadata@listData[["description"]][2]))
plotMA_arrange_iterative <- function(res_list) {
plots <- list()
for (i in seq_along(res_list)) {
result <- res_list[[i]]
res_name <- names(res_list)[i] # Get the name of the res object
res_sum <- sum(result$padj < 0.05, na.rm=TRUE)
p <- plotMA(result, returnData = TRUE) # DESeq2's PlotMA function
p_plot <- ggplot(p, aes(x = mean, y = lfc, color = isDE)) +
geom_point(aes(alpha = ifelse(isDE == "TRUE", 1, 0.1)), show.legend = FALSE) + # Reduce non DEG genes transperancy
scale_x_continuous(trans = "log10") + # Scale mean counts
ylim(-2, 2) +
labs(title = res_name,
subtitle = paste("Total genes:", res_sum),
caption = (gsub(".*\\(MLE\\):\\s*",
"",
result@elementMetadata@listData[["description"]][2]))) # Label plots
plots[[i]] <- p_plot
}
do.call(grid.arrange, c(plots, nrow = 2))
}
res_list <- list(
"1 Var: dex_trt_vs_untrt" = resLFC1,
"2 Var: dex_trt_vs_untrt" = resLFC2,
"2 Var: cell_N061011_vs_N052611" = resLFC2a,
"2 Var: N080611_vs_N052611" = resLFC2b,
"2 Var: N61311_vs_N052611" = resLFC2c
)
plotMA_arrange_iterative(res_list)
plotMA_arrange_iterative <- function(res_list) {
plots <- list()
for (i in seq_along(res_list)) {
result <- res_list[[i]]
res_name <- names(res_list)[i] # Get the name of the res object
res_sum <- sum(result$padj < 0.05, na.rm=TRUE)
p <- plotMA(result, returnData = TRUE) # DESeq2's PlotMA function
p_plot <- ggplot(p, aes(x = mean, y = lfc, color = isDE)) +
geom_point(aes(alpha = ifelse(isDE == "TRUE", 1, 0.1)), show.legend = FALSE) + # Reduce non DEG genes transperancy
scale_x_continuous(trans = "log10") + # Scale mean counts
ylim(-2, 2) +
labs(title = (gsub(".*\\(MLE\\):\\s*",
"",
result@elementMetadata@listData[["description"]][2])),
subtitle = paste("Total genes:", res_sum),
caption = (gsub(".*\\(MLE\\):\\s*",
"",
result@elementMetadata@listData[["description"]][2]))) # Label plots
plots[[i]] <- p_plot
}
do.call(grid.arrange, c(plots, nrow = 2))
}
res_list <- list(
"1 Var: dex_trt_vs_untrt" = resLFC1,
"2 Var: dex_trt_vs_untrt" = resLFC2,
"2 Var: cell_N061011_vs_N052611" = resLFC2a,
"2 Var: N080611_vs_N052611" = resLFC2b,
"2 Var: N61311_vs_N052611" = resLFC2c
)
plotMA_arrange_iterative(res_list)
plotMA_arrange_iterative <- function(res_list) {
plots <- list()
for (i in seq_along(res_list)) {
result <- res_list[[i]]
res_name <- names(res_list)[i] # Get the name of the res object
res_sum <- sum(result$padj < 0.05, na.rm=TRUE)
p <- plotMA(result, returnData = TRUE) # DESeq2's PlotMA function
p_plot <- ggplot(p, aes(x = mean, y = lfc, color = isDE)) +
geom_point(aes(alpha = ifelse(isDE == "TRUE", 1, 0.1)), show.legend = FALSE) + # Reduce non DEG genes transperancy
scale_x_continuous(trans = "log10") + # Scale mean counts
ylim(-2, 2) +
labs(title = (gsub(".*\\(MAP\\):\\s*",
"",
result@elementMetadata@listData[["description"]][2])),
subtitle = paste("Total genes:", res_sum),
caption = (gsub(".*\\(MLE\\):\\s*",
"",
result@elementMetadata@listData[["description"]][2]))) # Label plots
plots[[i]] <- p_plot
}
do.call(grid.arrange, c(plots, nrow = 2))
}
res_list <- list(
"1 Var: dex_trt_vs_untrt" = resLFC1,
"2 Var: dex_trt_vs_untrt" = resLFC2,
"2 Var: cell_N061011_vs_N052611" = resLFC2a,
"2 Var: N080611_vs_N052611" = resLFC2b,
"2 Var: N61311_vs_N052611" = resLFC2c
)
plotMA_arrange_iterative(res_list)
plotMA_arrange_iterative <- function(res_list) {
plots <- list()
for (i in seq_along(res_list)) {
result <- res_list[[i]]
res_name <- names(res_list)[i] # Get the name of the res object
res_sum <- sum(result$padj < 0.05, na.rm=TRUE)
p <- plotMA(result, returnData = TRUE) # DESeq2's PlotMA function
p_plot <- ggplot(p, aes(x = mean, y = lfc, color = isDE)) +
geom_point(aes(alpha = ifelse(isDE == "TRUE", 1, 0.1)), show.legend = FALSE) + # Reduce non DEG genes transperancy
scale_x_continuous(trans = "log10") + # Scale mean counts
ylim(-2, 2) +
labs(title = res_name,
subtitle = paste("Total genes:", res_sum),
caption = (gsub(".*\\(MAP\\):\\s*",
"",
result@elementMetadata@listData[["description"]][2]))) # Label plots
plots[[i]] <- p_plot
}
do.call(grid.arrange, c(plots, nrow = 2))
}
res_list <- list(
"1 Var: dex_trt_vs_untrt" = resLFC1,
"2 Var: dex_trt_vs_untrt" = resLFC2,
"2 Var: cell_N061011_vs_N052611" = resLFC2a,
"2 Var: N080611_vs_N052611" = resLFC2b,
"2 Var: N61311_vs_N052611" = resLFC2c
)
plotMA_arrange_iterative(res_list)
# Define design matrix for DESeq2
dds0 <- DESeqDataSetFromMatrix(
countData = counts,
colData = colData,
design = ~ cell
)
# normalization by estimating size factor
dds0 <- estimateSizeFactors(dds0)
# remove low expressed genes
keep <- rowSums(counts(dds0)) >= 10
dds0 <- dds0[keep, ]
# set factor level (reference group) : Im interested in comparing copd and smokers to the reference group non-smokers in this case.
dds0$dex <- relevel(dds0$dex, ref = "untrt")
# Run DEG analysis
dds0 <- DESeq(dds0)
res0 <- results(dds0)
res0
resultsNames(dds0)
resSum1 <- sum(res0$padj < 0.05, na.rm=TRUE)
resSum0 <- sum(res0$padj < 0.05, na.rm=TRUE)
resSum1 <- sum(res1$padj < 0.05, na.rm=TRUE)
# set factor level (reference group) : Im interested in comparing copd and smokers to the reference group non-smokers in this case.
dds0$dex <- relevel(dds0$dex, ref = "untrt")
res0
resultsNames(dds0)
res0 <- results(dds0, contrast = c("cell", "N061011", "N052611"))
res0a <- results(dds0, contrast = c("cell", "N080611", "N052611"))
res0b <- results(dds0, contrast = c("cell", "N61311", "N052611"))
res0
res0a
res0b
# Log fold shrink
resLFC0 <- lfcShrink(dds0, coef = "cell_N061011_vs_N052611", type="apeglm")
resLFC0a <- lfcShrink(dds0, coef = "cell_N080611_vs_N052611", type="apeglm")
resLFC0b <- lfcShrink(dds0, coef = "cell_N61311_vs_N052611", type="apeglm")
res_list <- list(
"~ dex" = resLFC1,
"~ cell" = resLFC0,
"~ cell" = resLFC0a,
"~ cell" = resLFC0b,
"~ dex + cell" = resLFC2,
"~ dex + cell" = resLFC2a,
"~ dex + cell" = resLFC2b,
"~ dex + cell" = resLFC2c
)
plotMA_arrange_iterative(res_list)
plotMA_arrange_iterative <- function(res_list) {
plots <- list()
for (i in seq_along(res_list)) {
result <- res_list[[i]]
res_name <- names(res_list)[i] # Get the name of the res object
res_sum <- sum(result$padj < 0.05, na.rm=TRUE)
p <- plotMA(result, returnData = TRUE) # DESeq2's PlotMA function
p_plot <- ggplot(p, aes(x = mean, y = lfc, color = isDE)) +
geom_point(aes(alpha = ifelse(isDE == "TRUE", 1, 0.1)), show.legend = FALSE) + # Reduce non DEG genes transperancy
scale_x_continuous(trans = "log10") + # Scale mean counts
ylim(-2, 2) +
labs(title = res_name,
subtitle = (gsub(".*\\(MAP\\):\\s*", "",
result@elementMetadata@listData[["description"]][2])),
caption = paste("Total genes:", res_sum)) # Label plots
plots[[i]] <- p_plot
}
do.call(grid.arrange, c(plots, nrow = 2))
}
res_list <- list(
"~ dex" = resLFC1,
"~ cell" = resLFC0,
"~ cell" = resLFC0a,
"~ cell" = resLFC0b,
"~ dex + cell" = resLFC2,
"~ dex + cell" = resLFC2a,
"~ dex + cell" = resLFC2b,
"~ dex + cell" = resLFC2c
)
plotMA_arrange_iterative(res_list)
plotMA_arrange_iterative(res_list)
metadata(rowRanges(se))
resultsNames(dds2)
# Define design matrix for DESeq2
dds2 <- DESeqDataSetFromMatrix(
countData = counts,
colData = colData,
design = ~ dex + cell)
# normalization by estimating size factor
dds2 <- estimateSizeFactors(dds2)
# remove low expressed genes
keep <- rowSums(counts(dds2)) >= 10
dds2 <- dds2[keep, ]
# Run DEG analysis
dds2 <- DESeq(dds2)
resultsNames(dds2)
# Extract results & Log fold shrink
res2 <- results(dds2, contrast = c("dex", "trt", "untrt"))
resLFC2 <- lfcShrink(dds2, coef = "dex_trt_vs_untrt", type="apeglm")
resultsNames(dds0)
# set factor level (reference group)
dds1$dex <- relevel(dds0$dex, ref = "N61311")
# Define design matrix for DESeq2
dds0 <- DESeqDataSetFromMatrix(
countData = counts,
colData = colData,
design = ~ cell)
# normalization by estimating size factor
dds0 <- estimateSizeFactors(dds0)
# remove low expressed genes
keep <- rowSums(counts(dds0)) >= 10
dds0 <- dds0[keep, ]
# set factor level (reference group)
dds1$dex <- relevel(dds0$dex, ref = "N61311")
# Run DEG analysis
dds0 <- DESeq(dds0)
# set factor level (reference group)
dds1$dex <- relevel(dds0$dex, ref = "N61311")
resultsNames(dd0)
resultsNames(dds0)
# set factor level (reference group)
dds1$dex <- relevel(dds0$cell, ref = "N61311")
# Run DEG analysis
dds0 <- DESeq(dds0)
resultsNames(dds0)
# Extract results & Log fold shrink
res0 <- results(dds0, contrast = c("cell", "N061011", "N052611"))
resLFC0 <- lfcShrink(dds0, coef = "cell_N061011_vs_N052611", type="apeglm")
res0a <- results(dds0, contrast = c("cell", "N080611", "N052611"))
resLFC0a <- lfcShrink(dds0, coef = "cell_N080611_vs_N052611", type="apeglm")
res0b <- results(dds0, contrast = c("cell", "N61311", "N052611"))
resLFC0b <- lfcShrink(dds0, coef = "cell_N61311_vs_N052611", type="apeglm")
# Define design matrix for DESeq2
dds2 <- DESeqDataSetFromMatrix(
countData = counts,
colData = colData,
design = ~ dex + cell)
# normalization by estimating size factor
dds2 <- estimateSizeFactors(dds2)
# remove low expressed genes
keep <- rowSums(counts(dds2)) >= 10
dds2 <- dds2[keep, ]
# Run DEG analysis
dds2 <- DESeq(dds2)
# Run DEG analysis
dds2 <- DESeq(dds2)
# set factor level (reference group)
dds2$dex <- relevel(dds2$cell, ref = "N61311", dds2$dex, ref = "untrt")
?relevel
# Define design matrix for DESeq2
dds2 <- DESeqDataSetFromMatrix(
countData = counts,
colData = colData,
design = ~ dex + cell)
# normalization by estimating size factor
dds2 <- estimateSizeFactors(dds2)
# remove low expressed genes
keep <- rowSums(counts(dds2)) >= 10
dds2 <- dds2[keep, ]
# Run DEG analysis
dds2 <- DESeq(dds2)
# set factor level (reference group)
dds1$dex <- relevel(dds0$cell, ref = "N61311")# Extract results & Log fold shrink
res2 <- results(dds2, contrast = c("dex", "trt", "untrt"))
resLFC2 <- lfcShrink(dds2, coef = "dex_trt_vs_untrt", type="apeglm")
resultsNames(dds2)
# set factor level (reference group)
dds2$dex <- relevel(dds2$dex, ref = "untrt")
resultsNames(dds2)
# Run DEG analysis
dds2 <- DESeq(dds2)
# Define design matrix for DESeq2
dds0 <- DESeqDataSetFromMatrix(
countData = counts,
colData = colData,
design = ~ cell)
# normalization by estimating size factor
dds0 <- estimateSizeFactors(dds0)
# remove low expressed genes
keep <- rowSums(counts(dds0)) >= 10
dds0 <- dds0[keep, ]
# set factor level (reference group)
dds1$cell <- relevel(dds0$cell, ref = "N61311")
# Run DEG analysis
dds0 <- DESeq(dds0)
# Extract results & Log fold shrink
res0 <- results(dds0, contrast = c("cell", "N061011", "N052611"))
resLFC0 <- lfcShrink(dds0, coef = "cell_N061011_vs_N052611", type="apeglm")
res0a <- results(dds0, contrast = c("cell", "N080611", "N052611"))
resLFC0a <- lfcShrink(dds0, coef = "cell_N080611_vs_N052611", type="apeglm")
res0b <- results(dds0, contrast = c("cell", "N61311", "N052611"))
resLFC0b <- lfcShrink(dds0, coef = "cell_N61311_vs_N052611", type="apeglm")
# set factor level (reference group)
dds0$cell <- relevel(dds0$cell, ref = "N61311")
# Run DEG analysis
dds0 <- DESeq(dds0)
resultsNames(dds0)
#Ensure matching sample names & order
all(colnames(counts) %in% row.names(colData))
all(colnames(counts) == row.names(colData))
# Define design matrix for DESeq2
dds1 <- DESeqDataSetFromMatrix(
countData = counts,
colData = colData,
design = ~ dex
)
# normalization by estimating size factor
dds1 <- estimateSizeFactors(dds1)
# remove low expressed genes
keep <- rowSums(counts(dds1)) >= 10
dds1 <- dds1[keep, ]
# set factor level (reference group)
dds1$dex <- relevel(dds1$dex, ref = "untrt")
# Run DEG analysis
dds1 <- DESeq(dds1)
res1 <- results(dds1)
res1
resultsNames(dds1)
resSum1 <- sum(res1$padj < 0.05, na.rm=TRUE)
# Log fold shrink
resLFC1 <- lfcShrink(dds1, coef = "dex_trt_vs_untrt", type="apeglm")
# xlim <- c(1,1e5); ylim <- c(-3,3)
#
# plotMA(resLFC1, xlim=xlim, ylim=ylim, main="apeglm")
# Define design matrix for DESeq2
dds0 <- DESeqDataSetFromMatrix(
countData = counts,
colData = colData,
design = ~ cell)
# normalization by estimating size factor
dds0 <- estimateSizeFactors(dds0)
# remove low expressed genes
keep <- rowSums(counts(dds0)) >= 10
dds0 <- dds0[keep, ]
# set factor level (reference group)
dds0$cell <- relevel(dds0$cell, ref = "N61311")
# Run DEG analysis
dds0 <- DESeq(dds0)
resultsNames(dds0)
# Extract results & Log fold shrink
res0 <- results(dds0, contrast = c("cell", "N052611", "N61311"))
resLFC0 <- lfcShrink(dds0, coef = "cell_N052611_vs_N61311", type="apeglm")
res0a <- results(dds0, contrast = c("cell", "N061011", "N61311"))
resLFC0a <- lfcShrink(dds0, coef = "cell_N061011_vs_N61311", type="apeglm")
res0b <- results(dds0, contrast = c("cell", "N080611", "N61311"))
resLFC0b <- lfcShrink(dds0, coef = "cell_N080611_vs_N61311", type="apeglm")
# Define design matrix for DESeq2
dds2 <- DESeqDataSetFromMatrix(
countData = counts,
colData = colData,
design = ~ dex + cell)
# normalization by estimating size factor
dds2 <- estimateSizeFactors(dds2)
# remove low expressed genes
keep <- rowSums(counts(dds2)) >= 10
dds2 <- dds2[keep, ]
# set factor level (reference group)
dds2$dex <- relevel(dds2$dex, ref = "untrt")
dds2$cell <- relevel(dds2$cell, ref = "N61311")
# Run DEG analysis
dds2 <- DESeq(dds2)
resultsNames(dds2)
# set factor level (reference group)
dds1$dex <- relevel(dds0$cell, ref = "N61311")# Extract results & Log fold shrink
res2 <- results(dds2, contrast = c("dex", "trt", "untrt"))
resLFC2 <- lfcShrink(dds2, coef = "dex_trt_vs_untrt", type="apeglm")
res2a <- results(dds2, contrast = c("cell", "N061011", "N052611"))
resLFC2a <- lfcShrink(dds2, coef = "cell_N061011_vs_N052611", type="apeglm")
resultsNames(dds2)
# Define design matrix for DESeq2
dds2 <- DESeqDataSetFromMatrix(
countData = counts,
colData = colData,
design = ~ dex + cell)
# normalization by estimating size factor
dds2 <- estimateSizeFactors(dds2)
# remove low expressed genes
keep <- rowSums(counts(dds2)) >= 10
dds2 <- dds2[keep, ]
# set factor level (reference group)
dds2$dex <- relevel(dds2$dex, ref = "untrt")
dds2$cell <- relevel(dds2$cell, ref = "N61311")
# Run DEG analysis
dds2 <- DESeq(dds2)
resultsNames(dds2)
# Extract results & Log fold shrink
res2 <- results(dds2, contrast = c("dex", "trt", "untrt"))
resLFC2 <- lfcShrink(dds2, coef = "dex_trt_vs_untrt", type="apeglm")
res2a <- results(dds2, contrast = c("cell", "N052611", "N61311"))
resLFC2a <- lfcShrink(dds2, coef = "cell_N052611_vs_N61311", type="apeglm")
res2b <- results(dds2, contrast = c("cell", "N061011", "N61311"))
resLFC2b <- lfcShrink(dds2, coef = "cell_N061011_vs_N61311", type="apeglm")
res2c <- results(dds2, contrast = c("cell", "N080611", "N61311"))
resLFC2c <- lfcShrink(dds2, coef = "cell_N080611_vs_N61311", type="apeglm")
res_list <- list(
"~ dex" = resLFC1,
"~ cell" = resLFC0,
"~ cell" = resLFC0a,
"~ cell" = resLFC0b,
"~ dex + cell" = resLFC2,
"~ dex + cell" = resLFC2a,
"~ dex + cell" = resLFC2b,
"~ dex + cell" = resLFC2c
)
plotMA_arrange_iterative(res_list)
plotMA_arrange_iterative(res_list)
# Define design matrix for DESeq2
dds2 <- DESeqDataSetFromMatrix(
countData = counts,
colData = colData,
design = ~ dex + cell + dex:cell)
# Define design matrix for DESeq2
dds3 <- DESeqDataSetFromMatrix(
countData = counts,
colData = colData,
design = ~ dex + cell + dex:cell)
# Define design matrix for DESeq2
dds2 <- DESeqDataSetFromMatrix(
countData = counts,
colData = colData,
design = ~ dex + cell)
# Define design matrix for DESeq2
dds2 <- DESeqDataSetFromMatrix(
countData = counts,
colData = colData,
design = ~ dex + cell)
# normalization by estimating size factor
dds2 <- estimateSizeFactors(dds2)
# remove low expressed genes
keep <- rowSums(counts(dds2)) >= 10
dds2 <- dds2[keep, ]
# set factor level (reference group)
dds2$dex <- relevel(dds2$dex, ref = "untrt")
dds2$cell <- relevel(dds2$cell, ref = "N61311")
# Run DEG analysis
dds2 <- DESeq(dds2)
resultsNames(dds2)
# Extract results & Log fold shrink
res2 <- results(dds2, contrast = c("dex", "trt", "untrt"))
resLFC2 <- lfcShrink(dds2, coef = "dex_trt_vs_untrt", type="apeglm")
res2a <- results(dds2, contrast = c("cell", "N052611", "N61311"))
resLFC2a <- lfcShrink(dds2, coef = "cell_N052611_vs_N61311", type="apeglm")
res2b <- results(dds2, contrast = c("cell", "N061011", "N61311"))
resLFC2b <- lfcShrink(dds2, coef = "cell_N061011_vs_N61311", type="apeglm")
res2c <- results(dds2, contrast = c("cell", "N080611", "N61311"))
resLFC2c <- lfcShrink(dds2, coef = "cell_N080611_vs_N61311", type="apeglm")
plotMA_arrange_iterative <- function(res_list) {
plots <- list()
for (i in seq_along(res_list)) {
result <- res_list[[i]]
res_name <- names(res_list)[i] # Get the name of the res object
res_sum <- sum(result$padj < 0.05, na.rm=TRUE)
p <- plotMA(result, returnData = TRUE) # DESeq2's PlotMA function
p_plot <- ggplot(p, aes(x = mean, y = lfc, color = isDE)) +
geom_point(aes(alpha = ifelse(isDE == "TRUE", 1, 0.1)), show.legend = FALSE) + # Reduce non DEG genes transperancy
scale_x_continuous(trans = "log10") + # Scale mean counts
ylim(-2, 2) +
labs(title = res_name,
subtitle = (gsub(".*\\(MAP\\):\\s*", "",
result@elementMetadata@listData[["description"]][2])),
caption = paste("Total genes:", res_sum)) # Label plots
plots[[i]] <- p_plot
}
do.call(grid.arrange, c(plots, nrow = 3))
}
# Define design matrix for DESeq2
dds3 <- DESeqDataSetFromMatrix(
countData = counts,
colData = colData,
design = ~ dex + cell + dex:cell)
# normalization by estimating size factor
dds3 <- estimateSizeFactors(dds3)
# remove low expressed genes
keep <- rowSums(counts(dds3)) >= 10
dds3 <- dds3[keep, ]
# set factor level (reference group)
dds3$dex <- relevel(dds3$dex, ref = "untrt")
dds3$cell <- relevel(dds3$cell, ref = "N61311")
# Run DEG analysis
dds3 <- DESeq(dds3)
resultsNames(dds3)
# Run DEG analysis
dds3 <- DESeq(dds3)
# Run DEG analysis
dds3 <- DESeq(dds3)
