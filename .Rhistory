res_name <- names(res_list)[i]
qobjs <- qvalue(result$pvalue)
hist <- hist(qobjs)
titled <- hist + labs(title = paste(res_name, "|", sub(".*: ", "", result@elementMetadata@listData[["description"]][2])))
print(titled)
plot(qobjs)
summary(qobjs)
}
}
plotStats(res_list)
# Variance stabilizing transformation. (log2 scaling for large counts)
vsd <- vst(resDxC1, blind = FALSE)
# Variance stabilizing transformation. (log2 scaling for large counts)
vsd <- vst(ddsDxC, blind = FALSE)
rld <- rlog(ddsDxC, blind = FALSE)
ntd <- normTransform(ddsDxC)
#
# meanSdPlot(assay(ntd))
#
# meanSdPlot(assay(vsd))
#
# meanSdPlot(assay(rld))
rm(vsd)
rm(rld)
rm(ntd)
# Contrast Dex
vsdDex <- vst(ddsDxC, blind = FALSE)
rldDex <- rlog(ddsDxC, blind = FALSE)
ntdDex <- normTransform(ddsDxC)
# Contrast Cell
vsdCell <- vst(ddsDxC, blind = FALSE)
rldCell <- rlog(ddsDxC, blind = FALSE)
ntdCell <- normTransform(ddsDxC)
# Contrast Dex + Cell
vsdDxC <- vst(ddsDxC, blind = FALSE)
rldDxC <- rlog(ddsDxC, blind = FALSE)
ntdDxC <- normTransform(ddsDxC)
#
# meanSdPlot(assay(ntd))
#
# meanSdPlot(assay(vsd))
#
# meanSdPlot(assay(rld))
meanSdPlot(assay(vsdDxC))
meanSdPlot(assay(rldDxC))
meanSdPlot(assay(ntdDxC))
# Contrast Dex
vsdDex <- vst(ddsDex, blind = FALSE)
rldDex <- rlog(ddsDex, blind = FALSE)
ntdDex <- normTransform(ddsDex)
# Contrast Cell
vsdCell <- vst(ddsCell, blind = FALSE)
rldCell <- rlog(ddsCell, blind = FALSE)
ntdCell <- normTransform(ddsCell)
# Contrast Dex + Cell
vsdDxC <- vst(ddsDxC, blind = FALSE)
rldDxC <- rlog(ddsDxC, blind = FALSE)
ntdDxC <- normTransform(ddsDxC)
View(vsdDxC)
vsdDxC@NAMES
vsdDxC@assays@data
vsdDxC@assays
vsdDxC@colData
vsdDxC@NAMES
vsdDxC@elementMetadata
vsdDxC@metadata
vsdDxC@elementMetadata@nrows
vsdDxC@elementMetadata@rownames
vsdDxC@elementMetadata@elementType
vsdDxC@elementMetadata@elementMetadata
vsdDxC@elementMetadata@metadata
vsdDxC@elementMetadata@listData
vsdDxC@metadata
vsdDxC@assays@data@metadata
vsdDxC
vsdDxC@rowRanges
sd <- meanSdPlot(assay(vsdDxC))
View(sd)
sd[["gg"]]
print(sd)
print(sd[["gg"]])
?normTransform
plot_Transformations <- function(trans_list) {
for (i in seq_along(trans_list)) {
trans <- trans_list[[i]]
sd <- meanSdPlot(trans)
res_name <- names(trans_list)[i]
print(sd[["gg"]]) + labs(title = res_name)
}
}
trans_list <- list(
"~ dex: vst" = vsdDex,
"~ dex: rlog" = rldDex,
"~ dex: norm" = ntdDex,
"~ cell: vst" = vsdCell,
"~ cell: rlog" = rldCell,
"~ cell: norm" = ntdCell,
"~ dex + cell: vst" = vsdDxC,
"~ dex + cell: rlog" = rldDxC,
"~ dex + cell: norm" = ntdDxC
)
plot_Transformations(trans_list)
plot_Transformations <- function(trans_list) {
for (i in seq_along(trans_list)) {
trans <- trans_list[[i]]
sd <- meanSdPlot(assay(trans))
res_name <- names(trans_list)[i]
print(sd[["gg"]]) + labs(title = res_name)
}
}
plot_Transformations(trans_list)
trans_list <- list(
"~ dex: vst" = vsdDex,
"~ dex: rlog" = rldDex,
"~ dex: norm" = ntdDex,
"~ cell: vst" = vsdCell,
"~ cell: rlog" = rldCell,
"~ cell: norm" = ntdCell,
"~ dex + cell: vst" = vsdDxC,
"~ dex + cell: rlog" = rldDxC,
"~ dex + cell: norm" = ntdDxC
)
plot_Transformations <- function(trans_list) {
for (i in seq_along(trans_list)) {
trans <- trans_list[[i]]
sd <- meanSdPlot(assay(trans))
name <- names(trans_list)[i]
print(sd[["gg"]]) + labs(title = name)
}
}
plot_Transformations(trans_list)
plot_Transformations <- function(trans_list) {
for (i in seq_along(trans_list)) {
trans <- trans_list[[i]]
sd <- meanSdPlot(assay(trans))
name <- names(trans_list)[i]
print(sd[["gg"]] + labs(title = name))
}
}
plot_Transformations(trans_list)
plot_Transformations <- function(trans_list) {
for (i in seq_along(trans_list)) {
trans <- trans_list[[i]]
name <- names(trans_list)[i]
sd <- meanSdPlot(assay(trans))
print(sd[["gg"]] + labs(title = name))
}
}
plot_Transformations(trans_list)
sd <- meanSdPlot(assay(vsdDxC))
plot_Transformations <- function(trans_list) {
for (i in seq_along(trans_list)) {
trans <- trans_list[[i]]
name <- names(trans_list)[i]
sd <- meanSdPlot(assay(trans))[["gg"]]
print(sd + labs(title = name))
}
}
plot_Transformations(trans_list)
plot_Transformations <- function(trans_list) {
for (i in seq_along(trans_list)) {
trans <- trans_list[[i]]
name <- names(trans_list)[i]
sd <- meanSdPlot(assay(trans))[["gg"]] + labs(title = name)
}
}
plot_Transformations(trans_list)
?meanSdPlot
plot_Transformations <- function(trans_list) {
for (i in seq_along(trans_list)) {
trans <- trans_list[[i]]
name <- names(trans_list)[i]
sd <- meanSdPlot(assay(trans), plot  = FALSE)
print(sd[["gg"]]) + labs(title = name)
}
}
plot_Transformations(trans_list)
plot_Transformations <- function(trans_list) {
for (i in seq_along(trans_list)) {
trans <- trans_list[[i]]
name <- names(trans_list)[i]
sd <- meanSdPlot(assay(trans), plot  = FALSE)
print(sd[["gg"]] + labs(title = name))
}
}
plot_Transformations(trans_list)
plot_Transformations <- function(trans_list) {
plots <- list()
for (i in seq_along(trans_list)) {
trans <- trans_list[[i]]
name <- names(trans_list)[i]
sd <- meanSdPlot(assay(trans), plot  = FALSE)
plots[[i]] <- sd[["gg"]] + labs(title = name)
}
grid.arrange(grobs = plots, ncol = 3)
}
plot_Transformations(trans_list)
plot_Transformations <- function(trans_list) {
plots <- list()
for (i in seq_along(trans_list)) {
trans <- trans_list[[i]]
name <- names(trans_list)[i]
sd <- meanSdPlot(assay(trans), plot  = FALSE)
plots[[i]] <- sd[["gg"]] + labs(title = name) + theme(legend.position = "none",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank())
}
grid.arrange(grobs = plots, ncol = 3)
}
plot_Transformations(trans_list)
View(ddsCell)
View(ddsDxC)
# Select top 20 DEG's
selectDex <- order(rowMeans(counts(ddsDex, normalized = TRUE)), decreasing = TRUE)[1:20]
selectCell <- order(rowMeans(counts(ddsCell, normalized = TRUE)), decreasing = TRUE)[1:20]
selectDxC <- order(rowMeans(counts(ddsDxC, normalized = TRUE)), decreasing = TRUE)[1:20]
dfDex <- as.data.frame(colData(ddsDex)[, c("dex")])
dfCell <- as.data.frame(colData(ddsCell)[, c("cell")])
dfDxC <- as.data.frame(colData(ddsDxC)[, c("dex", "cell")])
View(dfCell)
View(dfDxC)
pheatmap(assay(ntdDxC)[select, ],
cluster_rows = TRUE, show_rownames = TRUE,
cluster_cols = TRUE, annotation_col = df, show_colnames = FALSE,
main = "ntd", scale = "row"
)
pheatmap(assay(ntdDxC)[selectDxC, ],
cluster_rows = TRUE, show_rownames = TRUE,
cluster_cols = TRUE, annotation_col = dfDxC, show_colnames = FALSE,
main = "ntd", scale = "row"
)
pheatmap(assay(vsdDxC)[selectDxC, ],
cluster_rows = TRUE, show_rownames = TRUE,
cluster_cols = TRUE, annotation_col = dfDxC, show_colnames = FALSE,
main = "vsd", scale = "row"
)
pheatmap(assay(rldDxC)[selectDxC, ],
cluster_rows = TRUE, show_rownames = TRUE,
cluster_cols = TRUE, annotation_col = dfDxC, show_colnames = FALSE,
main = "rld", scale = "row"
)
pheatmap(assay(vsdDxC)[selectDxC, ],
cluster_rows = TRUE, show_rownames = TRUE,
cluster_cols = TRUE, annotation_col = dfDxC, show_colnames = TRUE,
main = "vsd", scale = "row"
)
pheatmap(assay(vsdDxC)[selectDxC, ],
cluster_rows = FALSE, show_rownames = TRUE,
cluster_cols = TRUE, annotation_col = dfDxC, show_colnames = TRUE,
main = "vsd", scale = "row"
)
pheatmap(assay(vsdDxC)[selectDxC, ],
cluster_rows = TRUE, show_rownames = TRUE,
cluster_cols = TRUE, annotation_col = dfDxC, show_colnames = TRUE,
main = "vsd", scale = "row"
)
pheatmap(assay(vsdDxC)[selectDxC, ],
cluster_rows = TRUE, show_rownames = TRUE,
cluster_cols = FALSE, annotation_col = dfDxC, show_colnames = TRUE,
main = "vsd", scale = "row"
)
pheatmap(assay(vsdDxC)[selectDxC, ],
cluster_rows = TRUE, show_rownames = TRUE,
cluster_cols = TRUE, annotation_col = dfDxC, show_colnames = TRUE,
main = "vsd", scale = "row"
)
pheatmap(assay(vsdDxC)[selectDxC, ],
cluster_rows = TRUE, show_rownames = TRUE,
cluster_cols = TRUE, annotation_col = dfDxC, show_colnames = FALSE,
main = "vsd", scale = "row"
)
pheatmap(assay(vsdDxC)[selectDxC, ],
cluster_rows = TRUE, show_rownames = TRUE,
cluster_cols = TRUE, annotation_col = dfDxC, show_colnames = TRUE,
main = "vsd", scale = "row"
)
pheatmap(assay(vsdDxC)[selectDxC, ],
cluster_rows = TRUE, show_rownames = TRUE,
cluster_cols = TRUE, annotation_col = dfDxC, show_colnames = FALSE,
main = "vsd", scale = "row"
)
pheatmap(assay(vsdDxC)[selectDxC, ],
cluster_rows = TRUE, show_rownames = FALSE,
cluster_cols = TRUE, annotation_col = dfDxC, show_colnames = FALSE,
main = "vsd", scale = "row"
)
pheatmap(assay(ntdDxC)[selectDxC, ],
cluster_rows = TRUE, show_rownames = FALSE,
cluster_cols = TRUE, annotation_col = dfDxC, show_colnames = FALSE,
main = "ntd", scale = "row"
)
pheatmap(assay(vsdDxC)[selectDxC, ],
cluster_rows = TRUE, show_rownames = FALSE,
cluster_cols = TRUE, annotation_col = dfDxC, show_colnames = FALSE,
main = "vsd", scale = "row"
)
pheatmap(assay(rldDxC)[selectDxC, ],
cluster_rows = TRUE, show_rownames = FALSE,
cluster_cols = TRUE, annotation_col = dfDxC, show_colnames = FALSE,
main = "rld", scale = "row"
)
pheatmap(assay(vsdDxC)[selectDxC, ],
cluster_rows = TRUE, show_rownames = FALSE,
cluster_cols = TRUE, annotation_col = dfDxC, show_colnames = FALSE,
main = "vsd", scale = "row"
)
View(vsdDxC)
# Determine between group variety
sampleDists <- dist(t(assay(vsdDxC)))
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(vsdDxC$dex, vsdDxC$cell, sep = "-")
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette(rev(brewer.pal(9, "Blues")))(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
col = colors
)
pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
col = colors, main = "Between Group Variability", scale = "row"
)
pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
col = colors, main = "Between Group Variability", scale = "column"
)
pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
col = colors, main = "Between Group Variability"
)
pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
col = colors, main = "Between Group Variability",
show_colnames = FALSE
)
pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
col = colors, main = "Between Group Variability",
show_colnames = TRUE
)
pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
col = colors, main = "Between Group Variability",
show_colnames = TRUE, show_rownames = TRUE
)
pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
col = colors, main = "Between Group Variability"
)
plotPCA(vsdDxC, intgroup = c("dex", "cell"))
plotPCA(vsdDxC, intgroup = c("cell"))
plotPCA(vsdDxC, intgroup = c("dex"))
plotPCA(vsdDxC, intgroup = c("dex", "cell"))
?plotPCA
plotPCA(vsdDxC, intgroup = c("dex"))
plotPCA(vsdDxC, intgroup = c("dex"), pcsToUse = 1:3)
plotPCA(vsdDxC, intgroup = c("dex"))
pca <- plotPCA(vsdDxC, intgroup = c("dex"))
View(pca)
pca <- plotPCA(vsdDxC, intgroup = c("dex"), returnData = TRUE)
View(pca)
pca <- plotPCA(vsdDxC, intgroup = c("dex")) + labs(title = "PCA")
pca <- plotPCA(vsdDxC, intgroup = c("dex")) + labs(title = "PCA")
plotPCA(vsdDxC, intgroup = c("dex")) + labs(title = "PCA")
plotPCA(vsdDxC, intgroup = c("dex", "cell")) + labs(title = "PCA by Dex & Cell")
plotPCA(vsdDxC, intgroup = c("cell")) + labs(title = "PCA by Cell")
plotPCA(vsdDxC, intgroup = c("dex")) + labs(title = "PCA by Dex")
pcaData <- plotPCA(vsdDxC,
intgroup = c("dex", "cell"),
returnData = TRUE
)
View(pcaData)
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(PC1, PC2, color = dex, shape = cell)) +
geom_point(size = 3) +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
coord_fixed()
ggplot(pcaData, aes(PC1, PC2, color = dex, shape = cell)) +
geom_point(size = 3) +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
coord_fixed() +
labs(title = "PCA by Dex & Cell")
ggplot(pcaData, aes(PC1, PC2, color = dex, shape = cell)) +
geom_point(size = 3) +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
coord_fixed() +
labs(title = "vst(~Dex+Cell): PCA by Dex & Cell")
logcounts <- log2(ddsDxC)
logcounts <- log2(ddsDxC + 1)
assay(vsdDxC)
assay(ddsCell)
assay(ddsDxC + 1)
assay(ddsDxC)
logDxC <- log2(assay(ddsDxC + 1))
logDxC <- log2(assay(ddsDxC))
# Contrast Dex
logDex <- log2(assay(ddsDex))
# Contrast Cell
logCell <- log2(assay(ddsCell))
# Contrast Dex + Cell
logDxC <- log2(assay(ddsDxC))
trans_list <- list(
"~ dex: log2" = logDex,
"~ dex: vst" = vsdDex,
"~ dex: rlog" = rldDex,
"~ dex: norm" = ntdDex,
"~ cell: log2" = logCell,
"~ cell: vst" = vsdCell,
"~ cell: rlog" = rldCell,
"~ cell: norm" = ntdCell,
"~ dex + cell: log2" = logDxC,
"~ dex + cell: vst" = vsdDxC,
"~ dex + cell: rlog" = rldDxC,
"~ dex + cell: norm" = ntdDxC
)
plot_Transformations <- function(trans_list) {
plots <- list()
for (i in seq_along(trans_list)) {
trans <- trans_list[[i]]
name <- names(trans_list)[i]
sd <- meanSdPlot(assay(trans), plot  = FALSE)
plots[[i]] <- sd[["gg"]] + labs(title = name) + theme(legend.position = "none",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank())
}
grid.arrange(grobs = plots, ncol = 4)
}
plot_Transformations(trans_list)
meanSdPlot(logDex)
meanSdPlot(assay(logDex))
type(vsdDex)
meanSdPlot(logDxC) + labs(title = "~ dex + cell: log2")
meanSdPlot(logDxC) + labs(title = "~ dex + cell: log2")
logDxCplot <- meanSdPlot(logDxC)
logDxCplot[["gg"]] + labs(title = "~ dex + cell: log2")
library(GEOquery)
library(airway)
library(DESeq2)
library(iSEE)
library(iSEEde)
library(org.Hs.eg.db)
library(scater)
library(scuttle)
library(gridExtra)
library(qvalue)
library(vsn)
library(apeglm)
library(ashr)
library(pheatmap)
library(RColorBrewer)
library(EnhancedVolcano)
library(gridExtra)
#load airway dataset as rse object
data(airway)
rse <- airway
rse
#extract counts
counts <- as.data.frame(assays(rse)$counts)
#extract metadata
colData <- as.data.frame(colData(rse))
rse@metadata[[1]]@title
rse@metadata[[1]]@title
metadata(rse)
rse@metadata[[1]]@abstract
rse@colData@rownames
as.data.frame(colData(rse))
head(as.data.frame(assays(rse)$counts))
metadata(rowRanges(rse))
## Number of Genes: **`r length(assays(rse)$counts)`**
`r head(as.data.frame(assays(rse)$counts))`
# Background
## Title
`r rse@metadata[[1]]@title`
rse@metadata[[1]]@title
rse@metadata[[1]]@title
## Title
`r rse@metadata[[1]]@title`
## Title
`r rse@metadata[[1]]@title`
## Experiment information
`r metadata(rse)`
## Abstract
`r rse@metadata[[1]]@abstract`
## Samples
`r rse@colData@rownames`
## Number of samples: **`r length(rse@colData@rownames)`**
`r as.data.frame(colData(rse))`
## Number of Genes: **`r length(assays(rse)$counts)`**
`r head(as.data.frame(assays(rse)$counts))`
`r rse@metadata[[1]]@title`
## Title
r rse@metadata[[1]]@title
## Title
rse@metadata[[1]]@title
```{r}
rse@metadata[[1]]@title
