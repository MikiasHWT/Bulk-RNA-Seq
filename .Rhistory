library(DESeq2)
# Match counts column names and metadata row names
desired_order <- metadata$samples
geneCounts <- geneCounts[, desired_order]
# Confirm match
all(colnames(geneCounts) %in% metadata$samples)
all(colnames(geneCounts) == metadata$samples)
# Set conditions variables as factors
metadata$patient_group <- factor(metadata$patient_group)
metadata$cell_type <- factor(metadata$cell_type)
# Define missing column names
colnames(counts)[1] <- "genes"
row.names(counts) <- counts$genes
colnames(metadata)[1] <- "samples"
# Define design matrix for DESeq2
dds <- DESeqDataSetFromMatrix(
countData = geneCounts,
colData = metadata,
design = ~ cell_type + patient_group
)
# Match counts column names and metadata row names
desired_order <- metadata$samples
geneCounts <- geneCounts[, desired_order]
# Remove genes column (gene names retained as index)
# Assign to new df to retain genes column for later data exploration
geneCounts <- counts |>
select(-genes)
# Match counts column names and metadata row names
desired_order <- metadata$samples
geneCounts <- geneCounts[, desired_order]
# Confirm match
all(colnames(geneCounts) %in% metadata$samples)
all(colnames(geneCounts) == metadata$samples)
# Set conditions variables as factors
metadata$patient_group <- factor(metadata$patient_group)
metadata$cell_type <- factor(metadata$cell_type)
# Define missing column names
colnames(counts)[1] <- "genes"
row.names(counts) <- counts$genes
colnames(metadata)[1] <- "samples"
# Define design matrix for DESeq2
dds <- DESeqDataSetFromMatrix(
countData = geneCounts,
colData = metadata,
design = ~ cell_type + patient_group
)
# Perform data normalization and estimation of size factors
dds <- DESeq(dds)
# Estimate dispersion
dds <- estimateDispersions(dds)
# lists the contracts
resultsNames(dds)
# lists the contracts
resultsNames(dds)
dds
View(dds)
View(metadata)
# Define contrasts
contrasts <- list(
"patient_group_smoker_vs_non_smoker" = c(0, 1, 0, 0, 0, 0),
"PatientGroup_copd_vs_non_smoker"    = c(0, 0, 1, 0, 0, 0),
"cell_type_mreg_vs_ma"               = c(0, 0, 0, 1, 0, 0),
"cell_type_mono_vs_ma"               = c(0, 0, 0, 0, 1, 0)
)
View(contrasts)
# Loop through each contrast and perform analysis
for (i in seq_along(contrasts)) {
contrast_name <- names(contrasts[i])
contrast <- contrasts[[i]]
# Perform differential expression analysis
dds_contrast <- DESeq(dds, test = "Wald", contrast = contrast)
# Get the results
contrast_results <- results(dds_contrast)
# Perform multiple testing correction (e.g., FDR)
contrast_results <- adjust(contrast_results, method = "fdr")
# Save the results
write.csv(contrast_results, file = paste0(contrast_name, "_results.csv"))
# Generate MA plot
png(file = paste0(contrast_name, "_MA_plot.png"))
plotMA(contrast_results, main = contrast_name)
dev.off()
}
# Loop through each contrast and perform analysis
for (i in seq_along(contrasts)) {
contrast_name <- names(contrasts[i])
contrast <- contrasts[[i]]
# Create a contrast matrix
contrast_matrix <- matrix(0, nrow = ncol(dds), ncol = 1)
colnames(contrast_matrix) <- contrast_name
contrast_matrix[, 1] <- contrast
# Perform differential expression analysis
dds_contrast <- DESeq(dds)
contrast_results <- results(dds_contrast, contrast = contrast_matrix)
# Perform multiple testing correction (e.g., FDR)
contrast_results <- adjust(contrast_results, method = "fdr")
# Save the results
write.csv(contrast_results, file = paste0(contrast_name, "_results.csv"))
# Generate MA plot
png(file = paste0(contrast_name, "_MA_plot.png"))
plotMA(contrast_results, main = contrast_name)
dev.off()
}
# Loop through each contrast and perform analysis
for (i in seq_along(contrasts)) {
contrast_name <- names(contrasts[i])
contrast <- contrasts[[i]]
# Create a contrast matrix
contrast_matrix <- matrix(0, nrow = ncol(dds), ncol = 1)
colnames(contrast_matrix) <- contrast_name
contrast_matrix[, 1] <- contrast[1:ncol(dds)]
# Perform differential expression analysis
dds_contrast <- DESeq(dds)
contrast_results <- results(dds_contrast, contrast = contrast_matrix)
# Perform multiple testing correction (e.g., FDR)
contrast_results <- adjust(contrast_results, method = "fdr")
# Save the results
write.csv(contrast_results, file = paste0(contrast_name, "_results.csv"))
# Generate MA plot
png(file = paste0(contrast_name, "_MA_plot.png"))
plotMA(contrast_results, main = contrast_name)
dev.off()
}
# Get all the contrasts
contrasts <- results(dds, contrast=c("cell_type_mono_vs_ma",
"cell_type_mreg_vs_ma",
"patient_group_copd_vs_non_smoker",
"patient_group_smoker_vs_non_smoker"))
# Perform data normalization and estimation of size factors
dds <- DESeq(dds)
# Get all the contrasts
contrasts <- results(dds, contrast=c("cell_type_mono_vs_ma",
"cell_type_mreg_vs_ma",
"patient_group_copd_vs_non_smoker",
"patient_group_smoker_vs_non_smoker"))
# Define the contrasts
contrasts <- c(
"cell_type" = c("mono", "ma"),
"cell_type" = c("mreg", "ma"),
"patient_group" = c("copd", "non_smoker"),
"patient_group" = c("smoker", "non_smoker")
)
# Define the contrasts
contrasts <- c(
"cell_type" = c("mono", "ma"),
"cell_type" = c("mreg", "ma"),
"patient_group" = c("copd", "non_smoker"),
"patient_group" = c("smoker", "non_smoker")
)
# Get all the contrasts
results <- lapply(contrasts, function(contrast) {
results(dds, contrast = contrast)
})
library(limma)
limmaRUsersGuide()
library(limma)
limmaRUsersGuide()
??limma
library(prettydoc)
library(GEOquery) # import datasets from GEO (unused)
library(DESeq2) # Diverential gene expression analysis
library(vsn) # Transformation
library(apeglm) # log fold shrinking (adaptive t prior shrinkage estimator)
library(ashr) # log fold shrinking (adaptive shrinkage estimator)
library(pheatmap) # heatmaps
library(RColorBrewer) # Color themes
library(EnhancedVolcano) # Pleasing volcano plots
library(gridExtra) # GGplot extention
library(qvalue)
library(tidyverse) # data wrangling & visualization
library(conflicted)
# Set function preferences
conflicts_prefer(dplyr::select)
conflicts_prefer(dplyr::filter)
conflicts_prefer(dplyr::slice)
conflicts_prefer(SparseArray::rowSds)
conflicts_prefer(base::setdiff)
# MA Plots
# Arranged into 2 rows
# Color & translucency by DEG
# Plot titles fed in as arguments
# Mean counts (x-axis) Log10 transformed
plotMA_arrange_iterative <- function(res_list) {
plots <- list()
for (i in seq_along(res_list)) {
res <- res_list[[i]]
res_name <- names(res_list)[i] # Get the name of the res object
p <- plotMA(res, returnData = TRUE) # DESeq2's PlotMA function
p_plot <- ggplot(p, aes(x = mean, y = lfc, color = isDE)) +
geom_point(aes(alpha = ifelse(isDE == "TRUE", 1, 0.1)), show.legend = FALSE) + # Reduce non DEG genes transperancy
scale_x_continuous(trans = "log10") + # Scale mean counts
ylim(-2, 2) +
labs(title = res_name) # Use the name in the plot title
plots[[i]] <- p_plot
}
do.call(grid.arrange, c(plots, nrow = 2))
}
# Load CSV's for gene counts & metadata. Retain untidy names for ease
counts <- read.csv("Data/GSE183973_bulkRNA_gene_counts.csv",
check.names = FALSE
)
metadata <- read.csv("Data/GSE183973_metadata_samples.csv",
check.names = FALSE
)
head(counts)
head(metadata)
# datGse <- getGEO("GSE183973")
#
# head(datGse)
# Set conditions variables as factors
metadata$patient_group <- factor(metadata$patient_group)
metadata$cell_type <- factor(metadata$cell_type)
# Define missing column names
colnames(counts)[1] <- "genes"
row.names(counts) <- counts$genes
colnames(metadata)[1] <- "samples"
View(metadata)
# Remove COPD Patients and Monocyte cells.
metadataSub <- metadata |>
filter(cell_type != mono)
# Remove COPD Patients and Monocyte cells.
metadataSub <- metadata |>
filter(cell_type != "mono")
View(metadataSub)
# Remove COPD Patients and Monocyte cells.
metadataSub <- metadata |>
filter(cell_type != "mono" & patient_group != "copd")
View(counts)
countsSub <- counts |>
select(-contains("mono"), -contains("copd"))
View(metadataSub)
View(countsSub)
# Remove COPD Patients and Monocyte cells.
metadataSub <- metadata |>
filter(cell_type != "mono" & patient_group != "copd")
countsSub <- counts |>
select(-contains("mono"), -contains("copd"))
geneCountsSub <- countsSub |>
select(-genes)
View(geneCountsSub)
# Match counts column names and metadata row names
desired_order <- metadataSub$samples
geneCountsSub <- geneCountsSub[, desired_order]
# Confirm match
all(colnames(geneCountsSub) %in% metadataSub$samples)
all(colnames(geneCountsSub) == metadataSub$samples)
# Define design matrix for DESeq2
ddsSub <- DESeqDataSetFromMatrix(
countData = geneCountsSub,
colData = metadataSub,
design = ~ cell_type + patient_group
)
View(ddsSub)
# normalization by estimating size factor
ddsSub <- estimateSizeFactors(ddsSub)
# remove low expressed genes
keep <- rowSums(counts(ddsSub)) >= 10
ddsSub <- ddsSub[keep, ]
# set factor level (reference group) : Im interested in comparing copd and smokers to the reference group non-smokers in this case.
ddsSub$patient_group <- relevel(dds$patient_group, ref = "non_smoker")
# set factor level (reference group) : Im interested in comparing copd and smokers to the reference group non-smokers in this case.
ddsSub$patient_group <- relevel(ddsSub$patient_group, ref = "non_smoker")
# Run DEG analysis
ddsSub <- DESeq(ddsSub)
ddsSub
# lists the contracts
resultsNames(ddsSub)
# defaul results with padj = 0.1
resSub <- results(ddsSub)
summary(resSub)
# Count of DEG's & display pvalue histograms
sum(resSub$padj < 0.1, na.rm = TRUE)
# Set a more strict FDR cutoff
sum(resSub$padj < 0.05, na.rm = TRUE)
# View P-Value histograms for Smoker vs Non-Smoker
hist(resSub$pvalue)
qobj <- qvalue(resSub$pvalue)
summary(qobj)
hist(qobj)
plot(qobj)
# Adaptive shrinkage estimator
resSubLFC <- lfcShrink(ddsSub,
coef = "patient_group_smoker_vs_non_smoker",
type = "apeglm"
)
plotMA(reSubLFC)
plotMA(resSubLFC)
# Plot the gene with the smallest p adj value across specified groupings
c1 <- plotCounts(ddsSub, gene = which.min(resSub$padj), intgroup = c("cell_type"), returnData = TRUE)
ggplot(c1, aes(x = cell_type, y = count)) +
geom_point(position = position_jitter(w = 0.1, h = 0)) +
scale_y_log10(breaks = c(25, 100, 400))
ggplot(c1, aes(x = cell_type, y = count, color = patient_group)) +
geom_point(position = position_jitter(w = 0.1, h = 0)) +
scale_y_log10(breaks = c(25, 100, 400))
# Plot the gene with the smallest p adj value across specified groupings
c1 <- plotCounts(ddsSub, gene = which.min(resSub$padj), intgroup = c("cell_type", "patient_group"), returnData = TRUE)
ggplot(c1, aes(x = cell_type, y = count, color = patient_group)) +
geom_point(position = position_jitter(w = 0.1, h = 0)) +
scale_y_log10(breaks = c(25, 100, 400))
plotCounts(ddsSub, gene = which.min(resSub$padj), intgroup = c("cell_type", "patient_group"), returnData = TRUE)
plotCounts(ddsSub, gene = which.min(resSub$padj), intgroup = c("cell_type", "patient_group"), returnData = TRUE)
which.min(resSub$padj)
plotCounts(ddsSub, gene = which.min(resSub$padj), intgroup = c("cell_type", "patient_group"))
ggplot(c1, aes(x = cell_type, y = count, color = patient_group)) +
geom_point(position = position_jitter(w = 0.1, h = 0)) +
scale_y_log10(breaks = c(25, 100, 400)) +
labs(title = "CCL4 Counts")
ggplot(c1, aes(x = cell_type, y = count, color = patient_group)) +
geom_point(position = position_jitter(w = 0.1, h = 0)) +
scale_y_log10(breaks = c(25, 100, 400)) +
labs(title = "CCL4 Counts")
ggplot(c1, aes(x = cell_type, y = count, color = patient_group)) +
geom_point(position = position_jitter(w = 0.1, h = 0), aes(size = 3)) +
scale_y_log10(breaks = c(25, 100, 400)) +
labs(title = "CCL4 Counts")
ggplot(c1, aes(x = cell_type, y = count, color = patient_group)) +
geom_point(position = position_jitter(w = 0.1, h = 0), aes(size = 2)) +
scale_y_log10(breaks = c(25, 100, 400)) +
labs(title = "CCL4 Counts")
ggplot(c1, aes(x = cell_type, y = count, color = patient_group)) +
geom_point(position = position_jitter(w = 0.1, h = 0), size = 2) +
scale_y_log10(breaks = c(25, 100, 400)) +
labs(title = "CCL4 Counts")
ggplot(c1, aes(x = cell_type, y = count, color = patient_group)) +
geom_point(position = position_jitter(w = 0.1, h = 0), size = 3) +
scale_y_log10(breaks = c(25, 100, 400)) +
labs(title = "CCL4 Counts")
ggplot(c1, aes(x = cell_type, y = count, color = patient_group)) +
geom_point(position = position_jitter(w = 0.1, h = 0), size = 3) +
scale_y_log10(breaks = c(25, 100, 400)) +
labs(title = "CCL4")
EnhancedVolcano(resSubLFC,
lab = rownames(resSubLFC),
x = "log2FoldChange",
y = "pvalue",
title = "Smoker vs Non-smoker",
pCutoff = 1e-05,
FCcutoff = 1,
pointSize = 2,
labSize = 4,
legendPosition = 'right',
legendLabSize = 10,
legendIconSize = 3.0,
max.overlaps = 20
)
EnhancedVolcano(resSubLFC,
lab = rownames(resSubLFC),
x = "log2FoldChange",
y = "pvalue",
title = "Smoker vs Non-smoker",
pCutoff = 1e-05,
FCcutoff = 1,
pointSize = 2,
labSize = 4,
legendPosition = 'right',
legendLabSize = 10,
legendIconSize = 3.0,
max.overlaps = 20
)
EnhancedVolcano(resSubLFC,
lab = rownames(resSubLFC),
x = "log2FoldChange",
y = "pvalue",
title = "Smoker vs Non-smoker",
pCutoff = 1e-05,
FCcutoff = 1,
pointSize = 2,
labSize = 4,
legendPosition = 'right',
legendLabSize = 10,
legendIconSize = 3.0,
max.overlaps = 20
)
EnhancedVolcano(resSubLFC,
lab = rownames(resSubLFC),
x = "log2FoldChange",
y = "pvalue",
title = "Smoker vs Non-smoker",
pCutoff = 1e-05,
FCcutoff = 1,
pointSize = 2,
labSize = 4,
legendPosition = 'right',
legendLabSize = 10,
legendIconSize = 3.0,
max.overlaps = 20
)
resSubLFC_DF <- as.data.frame(resSubLFC) |>
rownames_to_column("GeneID")
resSubLFC_DF <- resSubLFC_DF |>
mutate(`-log10(pvalue)` = -log10(pvalue))
ggplot(resSubLFC_DF, aes(x = log2FoldChange, y = `-log10(pvalue)`)) +
geom_point(aes(colour = padj < 0.05), size = 1) +
geom_text(data = ~ top_n(.x, 5, wt = -padj), aes(label = GeneID)) +
labs(title = "Smoker vs NonSmoker")
ggplot(resSubLFC_DF, aes(x = log2FoldChange, y = `-log10(pvalue)`)) +
geom_point(aes(colour = padj < 0.05), size = 1) +
geom_text(data = ~ top_n(.x, 20, wt = -padj), aes(label = GeneID)) +
labs(title = "Smoker vs NonSmoker")
EnhancedVolcano(resSubLFC,
lab = rownames(resSubLFC),
x = "log2FoldChange",
y = "pvalue",
title = "Smoker vs Non-smoker",
pCutoff = 1e-05,
FCcutoff = 1,
pointSize = 2,
labSize = 4,
legendPosition = 'right',
legendLabSize = 10,
legendIconSize = 3.0,
max.overlaps = 20
)
EnhancedVolcano(resSubLFC,
lab = rownames(resSubLFC),
x = "log2FoldChange",
y = "pvalue",
title = "Smoker vs Non-smoker",
pCutoff = 1e-05,
FCcutoff = 1,
pointSize = 2,
labSize = 4,
legendPosition = 'right',
legendLabSize = 10,
legendIconSize = 3.0,
max.overlaps = 20,
drawConnectors = TRUE,
widthConnectors = 1.0,
colConnectors = 'black',
boxedLabels = TRUE
)
EnhancedVolcano(resSubLFC,
lab = rownames(resSubLFC),
x = "log2FoldChange",
y = "pvalue",
title = "Smoker vs Non-smoker",
pCutoff = 1e-05,
FCcutoff = 1,
pointSize = 2,
labSize = 4,
legendPosition = 'right',
legendLabSize = 10,
legendIconSize = 3.0,
max.overlaps = 20,
drawConnectors = TRUE,
widthConnectors = 1.0,
colConnectors = 'black',
boxedLabels = TRUE
)
resSubLFC_DF <- as.data.frame(resSubLFC) |>
rownames_to_column("GeneID")
resSubLFC_DF <- resSubLFC_DF |>
mutate(`-log10(pvalue)` = -log10(pvalue))
ggplot(resSubLFC_DF, aes(x = log2FoldChange, y = `-log10(pvalue)`)) +
geom_point(aes(colour = padj < 0.05), size = 1) +
geom_text(data = ~ top_n(.x, 20, wt = -padj), aes(label = GeneID)) +
labs(title = "Smoker vs NonSmoker")
EnhancedVolcano(resSubLFC,
lab = rownames(resSubLFC),
x = "log2FoldChange",
y = "pvalue",
title = "Smoker vs Non-smoker",
pCutoff = 1e-05,
FCcutoff = 1,
pointSize = 2,
labSize = 4,
legendPosition = 'right',
legendLabSize = 10,
legendIconSize = 3.0,
max.overlaps = 20,
drawConnectors = TRUE,
widthConnectors = 1.0,
colConnectors = 'black',
boxedLabels = TRUE
)
EnhancedVolcano(resSubLFC,
lab = rownames(resSubLFC),
x = "log2FoldChange",
y = "pvalue",
title = "Smoker vs Non-smoker",
pCutoff = 1e-05,
FCcutoff = 1,
pointSize = 2,
labSize = 4,
legendPosition = 'right',
legendLabSize = 10,
legendIconSize = 3.0,
max.overlaps = 10,
drawConnectors = TRUE,
widthConnectors = 1.0,
colConnectors = 'black',
boxedLabels = TRUE
)
```{r fig.height = 8}
EnhancedVolcano(resSubLFC,
lab = rownames(resSubLFC),
x = "log2FoldChange",
y = "pvalue",
title = "Smoker vs Non-smoker",
pCutoff = 1e-05,
FCcutoff = 1,
pointSize = 2,
labSize = 4,
legendPosition = 'right',
legendLabSize = 10,
legendIconSize = 3.0,
max.overlaps = 10,
drawConnectors = TRUE,
widthConnectors = 1.0,
colConnectors = 'black',
boxedLabels = TRUE
)
