library(vsn)
library(pheatmap)
knitr::opts_chunk$set(echo = TRUE)
library(GEOquery)
library(tidyverse)
library(janitor)
library(DESeq2)
library(vsn)
library(pheatmap)
library(RColorBrewer)
head(row.names(geneCounts))
?plotPCA
knitr::opts_chunk$set(echo = TRUE)
library(GEOquery)
library(tidyverse)
library(janitor)
library(DESeq2)
library(vsn)
library(pheatmap)
library(RColorBrewer)
library(GEOquery)
library(tidyverse)
library(janitor)
library(DESeq2)
library(vsn)
library(pheatmap)
library(RColorBrewer)
?plotPCA
geneCounts <- read.csv("Data/GSE183973_bulkRNA_gene_counts.csv",
check.names = FALSE)
metadata <- read.csv("Data/GSE183973_metadata_samples.csv",
check.names = FALSE)
# Define missing column names
colnames(geneCounts)[1] <- "genes"
head(colnames(geneCounts))
colnames(metadata)[1] <- "samples"
head(metadata)
# Set column index
row.names(geneCounts) <- geneCounts$genes
head(row.names(geneCounts))
countsLong <- geneCounts |>
pivot_longer(cols = !genes, names_to = "samples", values_to = "counts")
featureMatrix <- countsLong |>
left_join(metadata, by = c("samples" = "samples"))
# Remove genes column (gene names retained as index)
Counts <- geneCounts |>
select(-genes)
# Match Counts column names and Metadata row names
desired_order <- metadata$samples
Counts <- Counts[, desired_order]
# Confirm match
all(colnames(Counts) %in% metadata$samples)
all(colnames(Counts) == metadata$samples)
# Remove genes column (gene names retained as index)
Counts <- geneCounts |>
select(-genes)
# Match Counts column names and Metadata row names
desired_order <- metadata$samples
Counts <- Counts[, desired_order]
# Confirm match
all(colnames(Counts) %in% metadata$samples)
all(colnames(Counts) == metadata$samples)
dds <- DESeqDataSetFromMatrix(countData = Counts,
colData = metadata,
design = ~ cell_type + patient_group)
dds
# Prefiltering : remove low expressed genes
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
# set factor level
## Note: COLLAPSE TECHNICAL REPLICATES
dds$patient_group <- relevel(dds$patient_group, ref = "non_smoker")
plotMA(dds)
plotCounts(dds, gene=which.min(res$padj), intgroup="patient_group")
dds <- DESeq(dds)
resultsNames(dds)
res <- results(dds)
res
summary(res)
plotCounts(dds, gene=which.min(res$padj), intgroup="patient_group")
plotCounts(dds, gene=which.min(res$padj), intgroup="patient_group", "cell_type")
plotCounts(dds, gene=which.min(res$padj), intgroup=c("patient_group", "cell_type"))
plotCounts(dds, gene="CD101", intgroup="patient_group")
p <- plotCounts(dds, gene=which.min(res$padj), intgroup="patient_group", returnData = TRUE)
ggplot(d, aes(x=patient_group, y=count)) +
geom_point(position=position_jitter(w=0.1,h=0)) +
scale_y_log10(breaks=c(25,100,400))
ggplot(p, aes(x=patient_group, y=count)) +
geom_point(position=position_jitter(w=0.1,h=0)) +
scale_y_log10(breaks=c(25,100,400))
ggplot(p, aes(x=patient_group, y=count, color = cell_type)) +
geom_point(position=position_jitter(w=0.1,h=0)) +
scale_y_log10(breaks=c(25,100,400))
p <- plotCounts(dds,
gene=which.min(res$padj),
intgroup=c("patient_group", "cell_type"),
returnData = TRUE)
ggplot(p, aes(x=patient_group, y=count, color = cell_type)) +
geom_point(position=position_jitter(w=0.1,h=0)) +
scale_y_log10(breaks=c(25,100,400))
which.min(res$padj)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Glimma")
library(Glimma)
glimmaMDS(dds)
dds <- DESeq(dds, quiet=TRUE)
dds <- DESeq(dds, quiet=TRUE)
# creates ma-plot.html in working directory
# link to it in Rmarkdown using [MA-plot](ma-plot.html)
htmlwidgets::saveWidget(glimmaMA(dds), "ma-plot.html")
dds <- DESeq(dds, quiet=TRUE)
glimmaMA(dds)
glimmaMA(dds, counts=counts, groups=patient_group)
glimmaMA(dds, counts=Counts, groups=patient_group)
colData(dds)
glimmaMA(dds, counts=Counts, groups=patient_group)
glimmaMA(dds, counts=Counts, groups=metadata)
glimmaMA(dds, counts=Counts, groups=metadata$samples)
colData(dds)
View(dds)
glimmaMA(dds, counts=counts, groups=patient_group)
glimmaMA(dds, groups=patient_group)
View(metadata)
View(metadata)
glimmaMA(dds, groups=metadata$patient_group)
library(EnhancedVolcano)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("EnhancedVolcano")
library(EnhancedVolcano)
library(GEOquery)
library(tidyverse)
library(janitor)
library(DESeq2)
library(vsn)
library(pheatmap)
library(RColorBrewer)
library(Glimma)
library(EnhancedVolcano)
geneCounts <- read.csv("Data/GSE183973_bulkRNA_gene_counts.csv",
check.names = FALSE)
metadata <- read.csv("Data/GSE183973_metadata_samples.csv",
check.names = FALSE)
# Define missing column names
colnames(geneCounts)[1] <- "genes"
head(colnames(geneCounts))
colnames(metadata)[1] <- "samples"
head(metadata)
# Set column index
row.names(geneCounts) <- geneCounts$genes
head(row.names(geneCounts))
countsLong <- geneCounts |>
pivot_longer(cols = !genes, names_to = "samples", values_to = "counts")
head(countsLong)
featureMatrix <- countsLong |>
left_join(metadata, by = c("samples" = "samples"))
head(featureMatrix)
# Remove genes column (gene names retained as index)
Counts <- geneCounts |>
select(-genes)
# Match Counts column names and Metadata row names
desired_order <- metadata$samples
Counts <- Counts[, desired_order]
# Confirm match
all(colnames(Counts) %in% metadata$samples)
all(colnames(Counts) == metadata$samples)
dds <- DESeqDataSetFromMatrix(countData = Counts,
colData = metadata,
design = ~ cell_type + patient_group)
dds
# Prefiltering : remove low expressed genes
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
# set factor level
## Note: COLLAPSE TECHNICAL REPLICATES
dds$patient_group <- relevel(dds$patient_group, ref = "non_smoker")
dds <- DESeq(dds)
resultsNames(dds)
res <- results(dds)
res
summary(res)
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'pvalue')
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'pvalue')
rownames(res)
View(res)
EnhancedVolcano(res, lab = rownames(res), x = 'log2FoldChange', y = 'pvalue')
EnhancedVolcano(res, lab = rownames(res), x = 'log2FoldChange', y = 'pvalue')
plotMA(res)
# barplot
featureMatrix |>
filter(genes == "CD101") |>
ggplot(aes(x = samples, y = counts, fill = cell_type)) +
geom_col() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
EnhancedVolcano(res, lab = rownames(res), x = 'log2FoldChange', y = 'pvalue')
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'pvalue',
title = 'Draft Volcano Plot',
pCutoff = 10e-32,
FCcutoff = 0.5,
pointSize = 3.0,
labSize = 6.0)
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'pvalue',
title = 'Draft Volcano Plot',
pCutoff = 10e-3,
FCcutoff = 0.5,
pointSize = 3.0,
labSize = 6.0)
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'pvalue',
title = 'Draft Volcano Plot',
pCutoff = 10e-3,
FCcutoff = 0.5,
pointSize = 3.0,
labSize = 6.0,
col=c('black', 'black', 'black', 'red3'),
colAlpha = 1)
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'pvalue',
title = 'Draft Volcano Plot',
pCutoff = 10e-3,
FCcutoff = 0.5,
pointSize = 3.0,
labSize = 6.0,
colAlpha = 1)
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'pvalue',
title = 'Draft Volcano Plot',
pCutoff = 10e-3,
FCcutoff = 0.5,
pointSize = 3.0,
labSize = 6.0,
colAlpha = 0.5)
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'pvalue',
title = 'Draft Volcano Plot',
pCutoff = 10e-3,
FCcutoff = 0.5,
pointSize = 3.0,
labSize = 6.0,
colAlpha = 0.3)
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'pvalue',
title = 'Draft Volcano Plot',
pCutoff = 1e-05,
FCcutoff = 0.5,
pointSize = 3.0,
labSize = 6.0,
colAlpha = 0.3)
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'pvalue',
title = 'Draft Volcano Plot',
pCutoff = 1e-05,
FCcutoff = 0.5,
pointSize = 2,
labSize = 6.0,
colAlpha = 0.3)
summary(res)
res
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'pvalue',
title = 'Smoker vs Non-smoker',
pCutoff = 1e-05,
FCcutoff = 0.5,
pointSize = 2,
labSize = 6.0,
colAlpha = 0.3)
BiocManager::install("GO.db")
BiocManager::install("GO.db")
BiocManager::install("GOstats")
getwd()
library(GEOquery)
library(tidyverse)
library(janitor)
library(DESeq2)
library(vsn)
library(pheatmap)
library(RColorBrewer)
library(Glimma)
library(EnhancedVolcano)
library(GO.db)
library(GOstats)
BulkDat <- read.csv("C:/Users/Owner/Desktop/CODE/DB.BRI.BioInfo/Bulk KN/KN_Bulk/240327_P517.csv",
check.names = FALSE)
metadata <- read.csv("C:/Users/Owner/Desktop/CODE/DB.BRI.BioInfo/Bulk KN/KN_Bulk/231212_Metadata_KN.csv",
header = FALSE)
row.names(metadata) <- c("samples", "inoculate", "tissue", "cellType")
metadata <- data.frame(t(metadata))
rownames(metadata) <- metadata$samples
# Set column index
row.names(BulkDat) <- make.unique(BulkDat$gene_symbol)
Counts <- BulkDat %>%
dplyr::select(-ensembl_gene_id)
countsLong <- Counts |>
pivot_longer(cols = !gene_symbol, names_to = "samples", values_to = "counts")
head(countsLong)
featureMatrix <- countsLong |>
left_join(metadata, by = c("samples" = "samples"))
head(featureMatrix)
featureMatrix |>
filter(gene_symbol == "Narf") |>
ggplot(aes(x = samples, y = counts, fill = inoculate)) +
geom_col() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Remove genes column (gene names retained as index)
CountsOnly <- Counts |>
select(-gene_symbol)
# Match Counts column names and Metadata row names
desired_order <- metadata$samples
Counts <- CountsOnly[, desired_order]
# Remove genes column (gene names retained as index)
CountsOnly <- Counts |>
dplyr::(-gene_symbol)
# Remove genes column (gene names retained as index)
CountsOnly <- Counts |>
dplyr::select(-gene_symbol)
# Match Counts column names and Metadata row names
desired_order <- metadata$samples
Counts <- CountsOnly[, desired_order]
# Confirm match
all(colnames(CountsOnly) %in% metadata$samples)
all(colnames(CountsOnly) == metadata$samples)
dds <- DESeqDataSetFromMatrix(countData = CountsOnly,
colData = metadata,
design = ~ tissue + cellType + inoculate)
DESeqDataSetFromMatrix?
?DESeqDataSetFromMatrix
geneCounts <- read.csv("Data/GSE183973_bulkRNA_gene_counts.csv",
check.names = FALSE)
library(stlyer)
install.packages("styler")
library(stlyer)
library(styler)
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
library(GEOquery) # import datasets from GEO
library(tidyverse) # data wrangling & visualization
library(janitor) # data cleaning
library(DESeq2) # Diverential gene expression analysis
library(vsn) # Transformation
library(pheatmap) # heatmaps
library(RColorBrewer) # Color themes
library(Glimma) # Interactive DEG visualization
library(EnhancedVolcano) # Pleasing volcano plots
library(GO.db) # Gene ontology
library(GOstats) # Gene ontology
library(clusterProfiler) # over representation/gene enrichment
# Using GEOquery will require some troubleshooting as the GSE submission for this dataset lacked feature data
# Instead the CSV files for gene counts and metadata can be download directly from GEO and saved locally.
geneCounts <- read.csv("Data/GSE183973_bulkRNA_gene_counts.csv",
check.names = FALSE
)
metadata <- read.csv("Data/GSE183973_metadata_samples.csv",
check.names = FALSE
)
# Define missing column names
colnames(geneCounts)[1] <- "genes"
head(colnames(geneCounts))
colnames(metadata)[1] <- "samples"
head(metadata)
# Set column index
row.names(geneCounts) <- geneCounts$genes
head(row.names(geneCounts))
# Pivot DF for exploratory data analysis
countsLong <- geneCounts |>
pivot_longer(cols = !genes, names_to = "samples", values_to = "counts")
head(countsLong)
featureMatrix <- countsLong |>
left_join(metadata, by = c("samples" = "samples"))
head(featureMatrix)
# Remove genes column (gene names retained as index)
Counts <- geneCounts |>
select(-genes)
# Match Counts column names and Metadata row names
desired_order <- metadata$samples
Counts <- Counts[, desired_order]
# Confirm matching column and row names (required for DESeq2)
all(colnames(Counts) %in% metadata$samples)
all(colnames(Counts) == metadata$samples)
# Define design matrix for DESeq2
dds <- DESeqDataSetFromMatrix(
countData = Counts,
colData = metadata,
design = ~ cell_type + patient_group
)
dds
# remove low expressed genes
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep, ]
# set factor level (reference group)
dds$patient_group <- relevel(dds$patient_group, ref = "non_smoker")
# Compare various transformations and their impact on data variance.
vsd <- vst(dds, blind = FALSE)
rld <- rlog(dds, blind = FALSE)
ntd <- normTransform(dds)
meanSdPlot(assay(ntd))
meanSdPlot(assay(vsd))
meanSdPlot(assay(rld))
select <- order(rowMeans(counts(dds, normalized = FALSE)),
decreasing = TRUE
)[1:20]
df <- as.data.frame(colData(dds)[, c("patient_group", "cell_type")])
pheatmap(assay(ntd)[select, ],
cluster_rows = FALSE, show_rownames = FALSE,
cluster_cols = FALSE, annotation_col = df
)
pheatmap(assay(vsd)[select, ],
cluster_rows = FALSE, show_rownames = FALSE,
cluster_cols = FALSE, annotation_col = df
)
pheatmap(assay(rld)[select, ],
cluster_rows = FALSE, show_rownames = FALSE,
cluster_cols = FALSE, annotation_col = df
)
sampleDists <- dist(t(assay(vsd)))
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(vsd$cell_type, vsd$patient_group, sep = "-")
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette(rev(brewer.pal(9, "Blues")))(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
col = colors
)
plotPCA(vsd, intgroup = c("cell_type", "patient_group"))
plotPCA(vsd, intgroup = c("cell_type"))
pcaData <- plotPCA(vsd,
intgroup = c("cell_type", "patient_group"),
returnData = TRUE
)
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(PC1, PC2, color = patient_group, shape = cell_type)) +
geom_point(size = 3) +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
coord_fixed()
dds <- DESeq(dds)
resultsNames(dds)
res <- results(dds)
res
summary(res)
##### Trial various contrasts #####
plotMA(res)
EnhancedVolcano(res,
lab = rownames(res),
x = "log2FoldChange",
y = "pvalue",
title = "Smoker vs Non-smoker",
pCutoff = 1e-05,
FCcutoff = 0.5,
pointSize = 2,
labSize = 6.0,
colAlpha = 0.3
)
# plot chosen genes per chosen conditions
plotCounts(dds, gene = which.min(res$padj), intgroup = "patient_group")
plotCounts(dds, gene = which.min(res$padj), intgroup = c("patient_group", "cell_type"))
plotCounts(dds, gene = "CD101", intgroup = "patient_group")
p <- plotCounts(dds,
gene = which.min(res$padj),
intgroup = c("patient_group", "cell_type"),
returnData = TRUE
)
ggplot(p, aes(x = patient_group, y = count, color = cell_type)) +
geom_point(position = position_jitter(w = 0.1, h = 0)) +
scale_y_log10(breaks = c(25, 100, 400))
# resSmall <- results(dds, alpha = 0.01)
# summary(resSmall)
# Extract differentially expressed genes
DE_genes <- subset(res, padj < 0.01)
summary(DE_genes)
DEG <- DE_genes@rownames
plotMA(DE_genes)
featureMatrix |>
filter(genes %in% DEG) |>
ggplot(aes(x = samples, y = genes, fill = counts)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
sessionInfo()
sessionInfo()
install.packages("installr")
library(installr)
updateR()
sessionInfo()
