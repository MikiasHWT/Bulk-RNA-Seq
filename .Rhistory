#   attributes = "ensembl_gene_id",
#   values = all_genes,
#   mart = mart
# )
#
#
# indNA <- which(is.na(genes$entrezgene_id))
#
# genes_noNA <- genes[-indNA, ]
#
# indnodup <- which(duplicated(genes_noNA$ entrezgene_id) == F)
#
# genes_noNA_nodup <- genes_noNA[indnodup, ]
#
# lFC <- res$log2FoldChange[-indNA]
#
# lFC <- lFC[indnodup]
#
# names(lFC) <- genes_noNA_nodup$entrezgene_id
#
# # Sort fold changes in decreasing order
# lFC <- sort(lFC, decreasing = TRUE)
#
#
# # Perform the GSEA using KEGG gene sets:
# gseaKEGG <- gseKEGG(
#   geneList = lFC,
#   organism = "mmu",
#   nPerm = 1000, # default number permutations
#   minGSSize = 5, # minimum gene set size
#   pvalueCutoff = 0.1, # padj cutoff value
#   verbose = FALSE
# )
#
# # Extract the GSEA results
# gseaKEGG_results <- gseaKEGG@result
sessionInfo()
# Translate gene Symbol to Entrez ID
geneSetmin2 = bitr(geneSetmin$ENSEMBL,
fromType="ENSEMBL",
toType=c("SYMBOL","ACCNUM","ALIAS","ENSEMBLPROT","ENSEMBLTRANS","ENTREZID"),
OrgDb="org.Hs.eg.db")
# Translate gene Symbol to Entrez ID
geneSetmin2 = bitr(geneSetmin$ENSEMBL,
fromType="ENSEMBL",
toType=c("SYMBOL","ALIAS","ENSEMBLPROT","ENTREZID"),
OrgDb="org.Hs.eg.db")
# Translate gene Symbol to Entrez ID
geneSetmin2 = bitr(geneSetmin$ENSEMBL,
fromType="ENSEMBL",
toType=c("SYMBOL","ALIAS","ENSEMBLPROT","ENTREZID"),
OrgDb="org.Hs.eg.db")
# Translate gene Symbol to Entrez ID
geneSetmin2 = bitr(geneSetmin$ENSEMBL,
fromType="ENSEMBL",
toType=c("SYMBOL", "ALIAS", "ENSEMBLPROT", "ENTREZID"),
OrgDb="org.Hs.eg.db")
# Translate gene Symbol to Entrez ID
geneSetmin2 = bitr(geneSetmin$ENSEMBL,
fromType="ENSEMBL",
toType=c("SYMBOL"),
OrgDb="org.Hs.eg.db")
view(geneSetmin2)
# Translate gene Symbol to Entrez ID
geneSetmin2 = bitr(geneSetmin$ENSEMBL,
fromType="ENSEMBL",
toType=c("SYMBOL", "ALIAS", "ENSEMBLPROT", "ENTREZID"),
OrgDb="org.Hs.eg.db")
View(geneSetmin2)
# Translate gene Symbol to Entrez ID
geneSetmin2 = bitr(geneSetmin$ENSEMBL,
fromType="ENSEMBL",
toType=c("SYMBOL", "ALIAS", "ENSEMBLPROT"),
OrgDb="org.Hs.eg.db")
View(geneSetmin2)
# Translate gene Symbol to Entrez ID
geneSetmin2 = bitr(geneSetmin$ENSEMBL,
fromType="ENSEMBL",
toType=c("SYMBOL", "ALIAS"),
OrgDb="org.Hs.eg.db")
View(geneSetmin2)
sum(is.na(geneSetmin2$SYMBOL))
# Translate gene Symbol to Entrez ID
geneSetmin2 = bitr(geneSetmin$ENSEMBL,
fromType="ENSEMBL",
toType=c("ALIAS"),
OrgDb="org.Hs.eg.db")
sum(is.na(geneSetmin2$ALIAS))
View(geneSetmin)
View(geneSetmin)
sum(unique(geneSetmin2$ENSEMBL))
unique(geneSetmin2$ENSEMBL
)
count(unique(geneSetmin2$ENSEMBL))
conflicted::conflicts_prefer(dplyr::count)
count(unique(geneSetmin2$ENSEMBL))
sum(unique(geneSetmin2$ENSEMBL))
sum(unique(as.numeric(geneSetmin2$ENSEMBL)))
length(unique(geneSetmin2$ENSEMBL)))
length(unique(geneSetmin2$ENSEMBL))
geneSetmin <- geneSet |>
select(log2FoldChange) |>
arrange(desc(log2FoldChange)) |>
rownames_to_column(var = "ENSEMBL") |>
select(ENSEMBL, everything())
# Translate gene Symbol to Entrez ID
geneSetmin2 = bitr(geneSetmin$ENSEMBL,
fromType="ENSEMBL",
toType=c("ALIAS"),
OrgDb="org.Hs.eg.db")
# ID options
columns(org.Hs.eg.db)
# Translate gene Symbol to Entrez ID
geneSetmin2 = bitr(geneSetmin$ENSEMBL,
fromType="ENSEMBL",
toType=c("SYMBOL", "ALIAS", "GENENAME", "GENETYPE", "GO"),
OrgDb="org.Hs.eg.db")
# Translate gene Symbol to Entrez ID
geneSetmin2 = bitr(geneSetmin$ENSEMBL,
fromType="ENSEMBL",
toType=c("SYMBOL", "ALIAS", "GENENAME", "GENETYPE"),
OrgDb="org.Hs.eg.db")
View(geneSetmin2)
geneSetFinal <- geneSetmin |>
full_join(geneSetmin2, by = "ENSEMBL") |>
select(SYMBOL, ENSEMBL, log2FoldChange)
geneSetFinal <- geneSetmin |>
full_join(geneSetmin2, by = "ENSEMBL") |>
select(ALIAS, ENSEMBL, log2FoldChange)
geneSetFinal <- geneSetmin |>
left_join(geneSetmin2, by = "ENSEMBL") |>
select(ALIAS, ENSEMBL, log2FoldChange)
View(geneSetFinal)
geneSetFinal <- geneSetmin |>
right_join(geneSetmin2, by = "ENSEMBL") |>
select(ALIAS, ENSEMBL, log2FoldChange)
View(geneSetFinal)
geneSetFinal <- geneSetmin |>
left_join(geneSetmin2, by = "ENSEMBL") |>
select(ALIAS, ENSEMBL, log2FoldChange)
geneSetmin |>
left_join(geneSetmin2, by = "ENSEMBL") |> head()
# Translate gene Symbol to Entrez ID
geneSetmin2 = bitr(geneSetmin$ENSEMBL,
fromType="ENSEMBL",
toType=c("SYMBOL","GENENAME", "GENETYPE"),
OrgDb="org.Hs.eg.db")
geneSetFinal <- geneSetmin |>
left_join(geneSetmin2, by = "ENSEMBL") |>
select(SYMBOL, ENSEMBL, log2FoldChange)
View(geneSetFinal)
geneSetFinal <- geneSetmin |>
right_join(geneSetmin2, by = "ENSEMBL") |>
select(SYMBOL, ENSEMBL, log2FoldChange)
View(geneSetFinal)
## feature 1: numeric vector
geneList <- geneSetFinal |>
select(SYMBOL, log2FoldChange)
View(geneList)
## feature 1: numeric vector
geneList <- geneSetFinal |>
select(SYMBOL, log2FoldChange) |>
arrange(desc(log2FoldChange))
## feature 2: named vector
names(geneList) = as.character(d[,1])
## feature 2: named vector
names(geneList) = as.character(geneList[,1])
## feature 1: numeric vector
geneList <- geneSetFinal |>
select(SYMBOL, log2FoldChange) |>
arrange(desc(log2FoldChange)) |>
rownames(SYMBOL)
## feature 1: numeric vector
geneList <- geneSetFinal |>
select(SYMBOL, log2FoldChange) |>
arrange(desc(log2FoldChange)) |>
tibble::column_to_rownames(var = "SYMBOL")
## feature 1: numeric vector
geneList <- geneSetFinal |>
select(SYMBOL, log2FoldChange) |>
arrange(desc(log2FoldChange))
de <- names(geneList)[1:100]
## feature 2: named vector
names(geneList) = as.character(geneList$SYMBOL)
de <- geneList$SYMBOL[1:100]
x <- enrichDO(de)
x <- enrichDO(de)
de <- names(geneList$SYMBOL)[1:100]
x <- enrichDO(de)
# ID options
columns(org.Hs.eg.db)
?names()
?names
## feature 2: named vector
names(geneList) = as.character(geneList$SYMBOL)
## feature 2: named vector
names(geneList$SYMBOL) = as.character(geneList$SYMBOL)
de <- names(geneList$SYMBOL)[1:100]
de <- names(geneList)[1:100]
x <- enrichDO(de)
# Translate gene Symbol to Entrez ID
geneSetmin2 = bitr(geneSetmin$ENSEMBL,
fromType="ENSEMBL",
toType=c("SYMBOL","GENENAME", "GENETYPE", "ENTREZID"),
OrgDb="org.Hs.eg.db")
geneSetFinal <- geneSetmin |>
right_join(geneSetmin2, by = "ENSEMBL") |>
select(SYMBOL, ENSEMBL, ENTREZID, log2FoldChange)
View(geneSetFinal)
## feature 1: numeric vector
geneList <- geneSetFinal |>
select(ENTREZID, log2FoldChange) |>
arrange(desc(log2FoldChange))
## feature 2: named vector
names(geneList$ENTREZID) = as.character(geneList$ENTREZID)
## feature 1: numeric vector
geneList <- geneSetFinal |>
select(ENTREZID, SYMBOL, log2FoldChange) |>
arrange(desc(log2FoldChange))
## feature 2: named vector
names(geneList$ENTREZID) = as.character(geneList$ENTREZID)
de <- names(geneList)[1:100]
de <- geneList$ENTREZID[1:100]
x <- enrichDO(de)
## show top 10 most significant pathways and want to exclude the second one
dotplot(x, showCategory = x$Description[1:10][-2])
View(x)
x@result[["Description"]]
## show top 10 most significant pathways and want to exclude the second one
dotplot(x, showCategory = x$Description[1:10])
## show top 10 most significant pathways and want to exclude the second one
dotplot(x, showCategory = x@result[["Description"]][1:10])
## show top 10 most significant pathways and want to exclude the second one
dotplot(x, showCategory = x$Description[1:10])
## show top 10 most significant pathways and want to exclude the second one
dotplot(x, showCategory = x$Description[1:20])
## show top 10 most significant pathways and want to exclude the second one
dotplot(x, showCategory = x$Description[1:200])
## show top 10 most significant pathways and want to exclude the second one
dotplot(x, showCategory = x$Description)
## show most significant pathways
dotplot(x, showCategory = x$Description[1:20])
dotplot(x, showCategory = x$Description[1:20])
x@result[["Description"]]
## show most significant pathways
dotplot(x, showCategory = x@result[["Description"]])
## show most significant pathways
dotplot(x, showCategory = x@result[["Description"]])
set.seed(123)
selected_pathways <- sample(x$Description, 10)
selected_pathways <- sample(x$Description, 8)
selected_pathways <- sample(x$Description, 2)
?sample
selected_pathways
selected_pathways <- sample(x$Description, 3)
selected_pathways <- sample(x$Description, 2)
de <- geneList$ENTREZID[1:3000]
x <- enrichDO(de)
## show most significant pathways
dotplot(x, showCategory = x$Description[1:20])
## show most significant pathways
dotplot(x, showCategory = x$Description[1:15])
selected_pathways <- sample(x$Description, 2)
selected_pathways
x <- enrichDO(geneList$ENTREZID)
## show most significant pathways
dotplot(x, showCategory = x$Description[1:12])
p1 <- dotplot(x, showCategory = 10, font.size=14)
p2 <- dotplot(x, showCategory = selected_pathways, font.size=14)
cowplot::plot_grid(p1, p2, labels=LETTERS[1:2])
# extract genes of a specific term/pathway
id <- x$ID[1:3]
id
x[[id[1]]]
geneInCategory(x)[id]
# Wrap long axis labels
y <- enrichPathway(de)
p1 <- dotplot(y, label_format = 20)
p2 <- dotplot(y, label_format = function(x) stringr::str_wrap(x, width=20))
cowplot::plot_grid(p1, p2, ncol=2, labels=c("A", "B"))
## show most significant pathways
dotplot(x, showCategory = x$Description[1:12])
# Gene set enrichment analysis (GSEA) using clusterProfiler and Pathview
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
View(mart)
mart <- useEnsembl(biomart = "ensembl",
dataset = "hsapiens_gene_ensembl")
View(mart)
genes <- getBM(
filters = "chromosome_name",
attributes = "ensembl_gene_id",
values = all_genes,
mart = mart
)
View(genes)
# Gene set enrichment analysis (GSEA) using clusterProfiler and Pathview
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
mart <- useEnsembl(biomart = "ensembl",
dataset = "hsapiens_gene_ensembl")
genes <- getBM(
filters = "chromosome_name",
attributes = "ensembl_gene_id",
values = all_genes,
mart = mart
)
indNA <- which(is.na(genes$entrezgene_id))
genes_noNA <- genes[-indNA, ]
indnodup <- which(duplicated(genes_noNA$ entrezgene_id) == F)
genes_noNA_nodup <- genes_noNA[indnodup, ]
lFC <- res$log2FoldChange[-indNA]
geneList <- geneList |>
select(SYMBOL, log2FoldChange) |>
arrange(desc(log2FoldChange))
# Perform the GSEA using KEGG gene sets:
gseaKEGG <- gseKEGG(
geneList = geneList,
organism = "hsa",
nPerm = 1000, # default number permutations
minGSSize = 5, # minimum gene set size
pvalueCutoff = 0.1, # padj cutoff value
verbose = FALSE
)
geneList <- geneList |>
select(SYMBOL, log2FoldChange) |>
arrange(desc(log2FoldChange)) |>
as.matrix()
# Perform the GSEA using KEGG gene sets:
gseaKEGG <- gseKEGG(
geneList = geneList,
organism = "hsa",
nPerm = 1000, # default number permutations
minGSSize = 5, # minimum gene set size
pvalueCutoff = 0.1, # padj cutoff value
verbose = FALSE
)
# Perform the GSEA using KEGG gene sets:
gseaKEGG <- gseKEGG(
geneList = geneList,
organism = "hsa",
nPerm = 1000, # default number permutations
minGSSize = 5, # minimum gene set size
pvalueCutoff = 0.1, # padj cutoff value
verbose = FALSE
)
geneList <- geneList |>
select(SYMBOL, log2FoldChange) |>
arrange(desc(log2FoldChange))
## feature 1: numeric vector
geneList <- geneSetFinal |>
select(ENTREZID, SYMBOL, log2FoldChange) |>
arrange(desc(log2FoldChange))
geneList <- geneList |>
select(SYMBOL, log2FoldChange) |>
arrange(desc(log2FoldChange))
## feature 1: numeric vector
geneList <- geneSetFinal |>
select(ENTREZID, SYMBOL, log2FoldChange) |>
arrange(desc(log2FoldChange))
geneListMat <- geneList |>
select(SYMBOL, log2FoldChange) |>
arrange(desc(log2FoldChange))
geneListMat <- as.matrix(geneListMat)
# Perform the GSEA using KEGG gene sets:
gseaKEGG <- gseKEGG(
geneList = geneListMat,
organism = "hsa",
nPerm = 1000, # default number permutations
minGSSize = 5, # minimum gene set size
pvalueCutoff = 0.1, # padj cutoff value
verbose = FALSE
)
View(geneListMat)
# Perform the GSEA using KEGG gene sets:
gseaKEGG <- gseKEGG(
geneList = geneList,
organism = "hsa",
nPerm = 1000, # default number permutations
minGSSize = 5, # minimum gene set size
pvalueCutoff = 0.1, # padj cutoff value
verbose = FALSE
)
# Perform the GSEA using KEGG gene sets:
gseaKEGG <- gseKEGG(
geneList = geneListMat,
organism = "hsa",
nPerm = 1000, # default number permutations
minGSSize = 5, # minimum gene set size
pvalueCutoff = 0.1, # padj cutoff value
verbose = FALSE
)
geneList_sorted <- sort(geneList_vector, decreasing = TRUE)  # Sort the vector in decreasing order
geneList_vector <- geneListMat$log2FoldChange  # Extract the log2FoldChange column as a vector
geneList_vector <- geneListMat$log2FoldChange  # Extract the log2FoldChange column as a vector
geneList_vector <- geneListMat[, "log2FoldChange"]
geneList_sorted <- sort(geneList_vector, decreasing = TRUE)
# Perform the GSEA using KEGG gene sets:
gseaKEGG <- gseKEGG(
geneList = geneList_sorted,
organism = "hsa",
nPerm = 1000, # default number permutations
minGSSize = 5, # minimum gene set size
pvalueCutoff = 0.1, # padj cutoff value
verbose = FALSE
)
# Perform the GSEA using KEGG gene sets:
gseaKEGG <- gseKEGG(
geneList = geneListMat,
organism = "hsa",
nPerm = 1000, # default number permutations
minGSSize = 5, # minimum gene set size
pvalueCutoff = 0.1, # padj cutoff value
verbose = FALSE
)
# Bar Plot
data(geneList)
## feature 1: numeric vector
geneList <- geneSetFinal |>
select(ENTREZID, SYMBOL, log2FoldChange) |>
arrange(desc(log2FoldChange))
## feature 2: named vector
names(geneList$ENTREZID) = as.character(geneList$ENTREZID)
edo <- enrichDGN(geneList$ENTREZID)
barplot(edo, showCategory = 20)
barplot(edo, showCategory = 12)
mutate(edo, qscore = -log(p.adjust, base = 10)) |>
barplot(x = "qscore")
edo <- pairwise_termsim(edo)
# UpSet Plot
# For over-representation analysis, upsetplot will calculate the overlaps among different gene sets
upsetplot(edo)
geneList$ENTREZID[abs(geneList$log2FoldChange) > 2]
edo <- enrichDGN(geneList$ENTREZID[abs(geneList$log2FoldChange) > 2])
barplot(edo, showCategory = 12)
mutate(edo, qscore = -log(p.adjust, base = 10)) |>
barplot(x = "qscore")
edo <- pairwise_termsim(edo)
# UpSet Plot
# For over-representation analysis, upsetplot will calculate the overlaps among different gene sets
upsetplot(edo)
# Dot plot
edo2 <- gseDO(geneList)
# Dot plot
edo2 <- gseDO(geneList$ENTREZID[abs(geneList$log2FoldChange) > 2])
ridgeplot(edo)
de <- geneList$ENTREZID[1:3000]
x <- enrichDO(geneList$ENTREZID)
## show most significant pathways
dotplot(x, showCategory = x$Description[1:12])
x <- enrichDO(geneList$ENTREZID[abs(geneList$log2FoldChange) > 2])
## show most significant pathways
dotplot(x, showCategory = x$Description[1:12])
x <- enrichDO(geneList$ENTREZID[abs(geneList$log2FoldChange) > 1])
## show most significant pathways
dotplot(x, showCategory = x$Description[1:12])
geneList$ENTREZID[abs(geneList$log2FoldChange) > 1]
# Raw counts Mean-SD plot
# ranked mean
meanSdPlot(assay(ddsDxC), ranks = FALSE, bins = 100)
# original scale
meanSdPlot(assay(ddsDxC), bins = 100)
# Log 2 Transformation
logTrans <- log2(assay(ddsDxC) + 1)
# Variance stabilizing transformation (preferred for speed)
vsdDxC <- vst(ddsDxC, blind = FALSE)
vsdTrans <- assay(vsdDxC)
# Regularized log transformation (preferred for variable size factors)
rldDxC <- rlog(ddsDxC, blind = FALSE)
rldTrans <- assay(rldDxC)
# Normalized counts transformation
ntdDxC <- normTransform(ddsDxC)
ntdTrans <- assay(ntdDxC)
# Prepare list of transformations for predefined plotting function
trans_list <- list(
"log2 + 1" = logTrans,
"vst" = vsdTrans,
"rlog" = rldTrans,
"norm" = ntdTrans
)
# Call plotting function
plot_Transformations(trans_list)
# Raw counts Mean-SD plot
# ranked mean
meanSdPlot(assay(ddsDxC), ranks = FALSE, bins = 100)
# original scale
meanSdPlot(assay(ddsDxC), bins = 100)
# Log 2 Transformation
logTrans <- log2(assay(ddsDxC) + 1)
# Variance stabilizing transformation (preferred for speed)
vsdDxC <- vst(ddsDxC, blind = FALSE)
vsdTrans <- assay(vsdDxC)
# Regularized log transformation (preferred for variable size factors)
rldDxC <- rlog(ddsDxC, blind = FALSE)
rldTrans <- assay(rldDxC)
# Normalized counts transformation
ntdDxC <- normTransform(ddsDxC)
ntdTrans <- assay(ntdDxC)
# Prepare list of transformations for predefined plotting function
trans_list <- list(
"log2 + 1" = logTrans,
"vst" = vsdTrans,
"rlog" = rldTrans,
"norm" = ntdTrans
)
# Call plotting function
plot_Transformations(trans_list)
View(geneList)
geneList <- geneSetFinal |>
select(ENTREZID, SYMBOL, log2FoldChange) |>
arrange(desc(log2FoldChange))
x <- enrichDO(geneList$ENTREZID[abs(geneList$log2FoldChange) > 1])
## show most significant pathways
dotplot(x, showCategory = x$Description[1:12])
