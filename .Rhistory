library(ggstance)       # Horizontal versions of ggplot2 geoms
# Statistical Analysis and Testing
library(qvalue)     # Estimation of q-values
library(vsn)        # Variance stabilization and normalization
library(apeglm)     # Adaptive shrinkage for differential expression
library(ashr)       # Empirical Bayes shrinkage estimation
# Data Management and Manipulation
library(conflicted) # Conflict resolution for function names
library(tidyverse)  # Collection of packages for data manipulation and visualization
# Biological Databases and Annotation
library(org.Mm.eg.db)  # Annotation package for the mouse genome
library(org.Hs.eg.db)  # Annotation package for the human genome
library(AnnotationHub) # Access to various biological annotation resources
library(ensembldb)     # Annotation package for Ensembl databases
library(biomaRt)       # Interface to BioMart biological databases
# Pathway and Functional Analysis
library(DOSE)           # Disease ontology and pathway analysis
library(pathview)       # Pathway-based data integration and visualization
library(clusterProfiler) # Gene set enrichment analysis
library(enrichplot)     # Visualization of enrichment analysis results
library(ReactomePA)     # Pathway analysis using Reactome database
# Other Topics
library(GEOquery)       # Access to Gene Expression Omnibus (GEO) datasets
library(europepmc)      # Access to European PubMed Central literature data
library(bigmemory)      # Management and analysis of large datasets in memory
library(bigalgebra)     # Linear and generalized linear algebra operations on large datasets
# Set function preferences
conflicts_prefer(dplyr::select)
conflicts_prefer(dplyr::filter)
conflicts_prefer(dplyr::slice)
conflicts_prefer(SummarizedExperiment::rowRanges)
#load airway dataset as rse object
data(airway)
rse <- airway
rse
#extract counts
counts <- as.data.frame(assays(rse)$counts)
#extract metadata
colData <- as.data.frame(colData(rse))
rse@metadata[[1]]@title
metadata(rse)
rse@metadata[[1]]@abstract
rse@colData@rownames
as.data.frame(colData(rse))
head(as.data.frame(assays(rse)$counts))
metadata(rowRanges(rse))
# MA Plots
# Arranged into 2 rows
# Color & translucency by DEG
# Plot titles fed in as arguments
# Mean counts (x-axis) Log10 transformed
plotMA_arrange_iterative <- function(res_list) {
plots <- list()
for (i in seq_along(res_list)) {
result <- res_list[[i]]
res_name <- names(res_list)[i] # Get the name of the resDxC1 object
res_sum <- sum(result$padj < 0.05, na.rm=TRUE) # Get sum of DEG's
p <- plotMA(result, returnData = TRUE) # DESeq2's PlotMA function
p_plot <- ggplot(p, aes(x = mean, y = lfc, color = isDE)) +
geom_point(aes(alpha = ifelse(isDE == "TRUE", 1, 0.1)), show.legend = FALSE) + # Reduce non-DEG transperancy
scale_x_continuous(trans = "log10") + # Scale mean counts
ylim(-2, 2) +
labs(title = res_name,
subtitle = (gsub(".*\\(MAP\\):\\s*", "",
result@elementMetadata@listData[["description"]][2])), # workaround to label plots with resDxC1 contrasts
caption = paste("Total genes:", res_sum))
plots[[i]] <- p_plot
}
do.call(grid.arrange, c(plots, nrow = 3))
}
plotStats <- function(res_list) {
for (i in seq_along(res_list)) {
result <- res_list[[i]]
res_name <- names(res_list)[i]
qobjs <- qvalue(result$pvalue) # Save qvalue object
hist <- hist(qobjs) # save pvalue histogram as gg object
titled <- hist + labs(title = paste(res_name, "|", sub(".*: ", "", result@elementMetadata@listData[["description"]][2]))) # label plot with contrast
print(titled) # plot pvalue histogram
plot(qobjs) # plot various qvalue plots
summary(qobjs) # summarize p & q value comparisons
}
}
plot_Transformations <- function(trans_list) {
plots <- list()
for (i in seq_along(trans_list)) {
trans <- trans_list[[i]]
name <- names(trans_list)[i]
sd <- meanSdPlot(trans, plot  = FALSE, bins = 100) # save mean/SD plot output as gg object
plots[[i]] <- sd[["gg"]] + labs(title = name) + theme(legend.position = "none",
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank())
}
grid.arrange(grobs = plots, ncol = 2, top = "Gene Count Transforms", left = "SD", bottom = "rank(mean)")
}
#Ensure matching sample names & order
all(colnames(counts) %in% row.names(colData))
all(colnames(counts) == row.names(colData))
# Define design matrix for DESeq2
ddsDex <- DESeqDataSetFromMatrix(
countData = counts,
colData = colData,
design = ~ dex
)
# normalization by estimating size factor
ddsDex <- estimateSizeFactors(ddsDex)
# remove low expressed genes
keep <- rowSums(counts(ddsDex)) >= 10
ddsDex <- ddsDex[keep, ]
# set factor level (reference group)
ddsDex$dex <- relevel(ddsDex$dex, ref = "untrt")
# Run DEG analysis
ddsDex <- DESeq(ddsDex)
resDex <- results(ddsDex)
# Log fold shrink
resLFC1 <- lfcShrink(ddsDex, coef = "dex_trt_vs_untrt", type="apeglm")
# Define design matrix for DESeq2
ddsCell <- DESeqDataSetFromMatrix(
countData = counts,
colData = colData,
design = ~ cell)
# normalization by estimating size factor
ddsCell <- estimateSizeFactors(ddsCell)
# remove low expressed genes
keep <- rowSums(counts(ddsCell)) >= 10
ddsCell <- ddsCell[keep, ]
# set factor level (reference group)
ddsCell$cell <- relevel(ddsCell$cell, ref = "N61311")
# Run DEG analysis
ddsCell <- DESeq(ddsCell)
resultsNames(ddsCell)
# Extract results & Log fold shrink
resCell1 <- results(ddsCell, contrast = c("cell", "N052611", "N61311"))
resCellLFC1 <- lfcShrink(ddsCell, coef = "cell_N052611_vs_N61311", type="apeglm")
resCell2 <- results(ddsCell, contrast = c("cell", "N061011", "N61311"))
resCellLFC2 <- lfcShrink(ddsCell, coef = "cell_N061011_vs_N61311", type="apeglm")
resCell3 <- results(ddsCell, contrast = c("cell", "N080611", "N61311"))
resCellLFC3 <- lfcShrink(ddsCell, coef = "cell_N080611_vs_N61311", type="apeglm")
# Define design matrix for DESeq2
ddsDxC <- DESeqDataSetFromMatrix(
countData = counts,
colData = colData,
design = ~ dex + cell)
# normalization by estimating size factor
ddsDxC <- estimateSizeFactors(ddsDxC)
# remove low expressed genes
keep <- rowSums(counts(ddsDxC)) >= 10
ddsDxC <- ddsDxC[keep, ]
# set factor level (reference group)
ddsDxC$dex <- relevel(ddsDxC$dex, ref = "untrt")
ddsDxC$cell <- relevel(ddsDxC$cell, ref = "N61311")
# Run DEG analysis
ddsDxC <- DESeq(ddsDxC)
resultsNames(ddsDxC)
# Extract results & Log fold shrink
resDxC1 <- results(ddsDxC, contrast = c("dex", "trt", "untrt"))
resDxCLFC1 <- lfcShrink(ddsDxC, coef = "dex_trt_vs_untrt", type="apeglm")
resDxC2 <- results(ddsDxC, contrast = c("cell", "N052611", "N61311"))
resDxCLFC2 <- lfcShrink(ddsDxC, coef = "cell_N052611_vs_N61311", type="apeglm")
resDxC3 <- results(ddsDxC, contrast = c("cell", "N061011", "N61311"))
resDxCLFC3 <- lfcShrink(ddsDxC, coef = "cell_N061011_vs_N61311", type="apeglm")
resDxC4 <- results(ddsDxC, contrast = c("cell", "N080611", "N61311"))
resDxCLFC4 <- lfcShrink(ddsDxC, coef = "cell_N080611_vs_N61311", type="apeglm")
# Define design matrix for DESeq2
dds3 <- DESeqDataSetFromMatrix(
countData = counts,
colData = colData,
design = ~ dex + cell + dex:cell)
# normalization by estimating size factor
dds3 <- estimateSizeFactors(dds3)
# remove low expressed genes
keep <- rowSums(counts(dds3)) >= 10
dds3 <- dds3[keep, ]
# set factor level (reference group)
dds3$dex <- relevel(dds3$dex, ref = "untrt")
dds3$cell <- relevel(dds3$cell, ref = "N61311")
# Run DEG analysis
# dds3 <- DESeq(dds3)
# Prep results list for predefined plotting function
res_list <- list(
"~ dex" = resLFC1,
"~ cell" = resCellLFC1,
"~ cell" = resCellLFC2,
"~ cell" = resCellLFC3,
"~ dex + cell" = resDxCLFC1,
"~ dex + cell" = resDxCLFC2,
"~ dex + cell" = resDxCLFC3,
"~ dex + cell" = resDxCLFC4
)
# Call plotting function
plotMA_arrange_iterative(res_list)
# Create DF for ggplot volcano plot
resDxCLFC1_DF <- as.data.frame(resDxCLFC1)
resDxCLFC1_DF <- resDxCLFC1_DF |>
mutate(`-log10(pvalue)` = -log10(pvalue)) |>
rownames_to_column(var = "ENSEMBL")
# Query database for gene Symbols
GeneSymbols = bitr(resDxCLFC1_DF$ENSEMBL,
fromType="ENSEMBL",
toType="SYMBOL",
OrgDb="org.Hs.eg.db")
# Merge two DF's
resDxCLFC1_DF <- resDxCLFC1_DF |>
left_join(GeneSymbols, by = "ENSEMBL")
# plot enchanced volcano
EnhancedVolcano(resDxCLFC1_DF,
lab = resDxCLFC1_DF$SYMBOL,
x = "log2FoldChange",
y = "pvalue",
title = "Treated vs Untreated",
pCutoff = 1e-05,
FCcutoff = 1,
pointSize = 2,
labSize = 4,
colAlpha = 0.3
)
# gg volcano plot
ggplot(resDxCLFC1_DF, aes(x = log2FoldChange, y = `-log10(pvalue)`)) +
geom_point(aes(colour = padj < 0.05), size = 1) +
geom_text_repel(data = ~ top_n(.x, 20, wt = -padj), aes(label = SYMBOL)) +
labs(title = "Treated vs Untreated")
# Call previously defined function
plotStats(res_list)
# Raw counts Mean-SD plot
# ranked mean
meanSdPlot(assay(ddsDxC), ranks = FALSE, bins = 100)
# original scale
meanSdPlot(assay(ddsDxC), bins = 100)
# Log 2 Transformation
logTrans <- log2(assay(ddsDxC) + 1)
# Variance stabilizing transformation (preferred for speed)
vsdDxC <- vst(ddsDxC, blind = FALSE)
vsdTrans <- assay(vsdDxC)
# Regularized log transformation (preferred for variable size factors)
rldDxC <- rlog(ddsDxC, blind = FALSE)
rldTrans <- assay(rldDxC)
# Normalized counts transformation
ntdDxC <- normTransform(ddsDxC)
ntdTrans <- assay(ntdDxC)
# Prepare list of transformations for predefined plotting function
trans_list <- list(
"log2 + 1" = logTrans,
"vst" = vsdTrans,
"rlog" = rldTrans,
"norm" = ntdTrans
)
# Call plotting function
plot_Transformations(trans_list)
# Select top 20 DEG's
selectDex <- order(rowMeans(counts(ddsDex, normalized = TRUE)), decreasing = TRUE)[1:20]
selectCell <- order(rowMeans(counts(ddsCell, normalized = TRUE)), decreasing = TRUE)[1:20]
selectDxC <- order(rowMeans(counts(ddsDxC, normalized = TRUE)), decreasing = TRUE)[1:20]
# Extract clustering variables
dfDex <- as.data.frame(colData(ddsDex)[, c("dex")])
dfCell <- as.data.frame(colData(ddsCell)[, c("cell")])
dfDxC <- as.data.frame(colData(ddsDxC)[, c("dex", "cell")])
# Heatmaps
pheatmap(assay(ntdDxC)[selectDxC, ],
cluster_rows = TRUE, show_rownames = FALSE,
cluster_cols = TRUE, annotation_col = dfDxC, show_colnames = FALSE,
main = "ntd", scale = "row"
)
pheatmap(assay(vsdDxC)[selectDxC, ],
cluster_rows = TRUE, show_rownames = FALSE,
cluster_cols = TRUE, annotation_col = dfDxC, show_colnames = FALSE,
main = "vsd", scale = "row"
)
pheatmap(assay(rldDxC)[selectDxC, ],
cluster_rows = TRUE, show_rownames = FALSE,
cluster_cols = TRUE, annotation_col = dfDxC, show_colnames = FALSE,
main = "rld", scale = "row"
)
# Determine between group variety
sampleDists <- dist(t(assay(vsdDxC)))
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(vsdDxC$dex, vsdDxC$cell, sep = "-")
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette(rev(brewer.pal(9, "Blues")))(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
col = colors, main = "Between Group Variability"
)
plotPCA(vsdDxC, intgroup = c("dex", "cell")) + labs(title = "vst(~Dex+Cell): PCA by Dex & Cell")
plotPCA(vsdDxC, intgroup = c("cell")) + labs(title = "vst(~Dex+Cell): PCA by Cell")
plotPCA(vsdDxC, intgroup = c("dex")) + labs(title = "vst(~Dex+Cell): PCA by Dex")
pcaData <- plotPCA(vsdDxC,
intgroup = c("dex", "cell"),
returnData = TRUE
)
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(PC1, PC2, color = dex, shape = cell)) +
geom_point(size = 3) +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
coord_fixed() +
labs(title = "vst(~Dex+Cell): PCA by Dex & Cell")
# plot counts for most significant gene for treated vs untreated contract in 2 variable DGE analysis
p <- plotCounts(ddsDxC,
gene = which.min(resDxC1$padj),
intgroup = c("dex", "cell"),
returnData = TRUE
)
ggplot(p, aes(x = dex, y = count, color = cell)) +
geom_point(position = position_jitter(w = 0.1, h = 0.1), size = 4) +
scale_y_log10(breaks = c(25, 100, 400)) +
labs(title = rownames(resDxC1)[which.min(resDxC1$padj)])
# # Plot venn diagram
# vennTest <- tibble(ENSEMBLEID = rownames(resDxC1)) |>
#   mutate(Treated = resDxC1$padj < 0.05 &
#     !is.na(resDxC1$padj) &
#     resDxC1$log2FoldChange > 0) |>
#   mutate(Untreated = resDxC1$padj < 0.05 &
#     !is.na(resDxC1$padj) &
#     resDxC1$log2FoldChange < 0) |>
#   mutate(N052611 = resDxC2$padj < 0.05 &
#     !is.na(resDxC2$padj) &
#     resDxC2$log2FoldChange > 0) |>
#   mutate(N61311 = resDxC2$padj < 0.05 &
#     !is.na(resDxC2$padj) &
#     resDxC2$log2FoldChange < 0)
#
# ggvenn(vennTest, set_name_size = 4)
# Create background dataset for hypergeometric testing
all_genes <- as.character(rownames(resDxC1))
# Extract significant genes
signif_res <- resDxC1[resDxC1$padj < 0.05 & !is.na(resDxC1$padj), ]
signif_genes <- as.character(rownames(signif_res))
# Setup ranked genelist
geneSet <- as.data.frame(signif_res)
geneSetmin <- geneSet |>
select(log2FoldChange) |>
arrange(desc(log2FoldChange)) |>
rownames_to_column(var = "ENSEMBL") |>
select(ENSEMBL, everything())
# # Determine invalid SYMBOL names and remove
# valid_symbols <- keys(org.Hs.eg.db, keytype = "SYMBOL")
#
# invalid_genes <- setdiff(geneSetmin$SYMBOL, valid_symbols)
#
# print(invalid_genes)
#
# geneSetmin <- geneSetmin |>
#   filter(SYMBOL %in% valid_symbols)
#
# geneSetminCOPD <- geneSetminCOPD |>
#   filter(SYMBOL %in% valid_symbols)
#
# geneSetminWild <- geneSetminWild |>
#   filter(SYMBOL %in% valid_symbols)
# ID options
columns(org.Hs.eg.db)
# Translate gene Symbol to Entrez ID
geneSetmin2 = bitr(geneSetmin$ENSEMBL,
fromType="ENSEMBL",
toType="SYMBOL",
OrgDb="org.Hs.eg.db")
geneSetFinal <- geneSetmin |>
full_join(geneSetmin2, by = "ENSEMBL") |>
select(SYMBOL, ENSEMBL, log2FoldChange)
# write.csv(geneSetFinal, file="TreatedVSUntreated_GeneSet.csv")
# Run GO enrichment analysis
# Biological Process
egoBP <- enrichGO(
gene = signif_genes,
universe = all_genes,
keyType = "ENSEMBL",
OrgDb = org.Hs.eg.db,
ont = "BP",
pAdjustMethod = "BH",
qvalueCutoff = 0.05,
readable = TRUE
)
head(egoBP)
# Cellular Component
egoCC <- enrichGO(
gene = signif_genes,
universe = all_genes,
keyType = "ENSEMBL",
OrgDb = org.Hs.eg.db,
ont = "CC",
pAdjustMethod = "BH",
qvalueCutoff = 0.05,
readable = TRUE
)
head(egoCC)
# Molecular Function
egoMF <- enrichGO(
gene = signif_genes,
universe = all_genes,
keyType = "ENSEMBL",
OrgDb = org.Hs.eg.db,
ont = "MF",
pAdjustMethod = "BH",
qvalueCutoff = 0.05,
readable = TRUE
)
head(egoMF)
# Output results from GO analysis to a table
clusterBP_summary <- data.frame(egoBP)
clusterCC_summary <- data.frame(egoCC)
clusterMF_summary <- data.frame(egoMF)
# Visualize Biological Process
dotplot(egoBP, showCategory = 12)
goplot(egoBP)
# Cellular Component
dotplot(egoCC, showCategory = 12)
goplot(egoCC)
# Molecular Function
dotplot(egoMF, showCategory = 12)
goplot(egoMF)
# To color genes by log2 fold changes
signif_res_lFC <- signif_res$log2FoldChange
cnetplot(egoBP,
categorySize = "pvalue",
showCategory = 5,
foldChange = signif_res_lFC,
vertex.label.font = 6
)
cnetplot(egoCC,
categorySize = "pvalue",
showCategory = 5,
foldChange = signif_res_lFC,
vertex.label.font = 6
)
cnetplot(egoMF,
categorySize = "pvalue",
showCategory = 5,
foldChange = signif_res_lFC,
vertex.label.font = 6
)
# Prep results list for predefined plotting function
res_list <- list(
"~ dex" = resLFC1,
"~ cell" = resCellLFC1,
"~ cell" = resCellLFC2,
"~ cell" = resCellLFC3,
"~ dex + cell" = resDxCLFC1,
"~ dex + cell" = resDxCLFC2,
"~ dex + cell" = resDxCLFC3,
"~ dex + cell" = resDxCLFC4
)
# Call plotting function
plotMA_arrange_iterative(res_list)
# Prep results list for predefined plotting function
res_list <- list(
"~ dex" = resLFC1,
"~ cell" = resCellLFC1,
"~ cell" = resCellLFC2,
"~ cell" = resCellLFC3,
"~ dex + cell" = resDxCLFC1,
"~ dex + cell" = resDxCLFC2,
"~ dex + cell" = resDxCLFC3,
"~ dex + cell" = resDxCLFC4
)
# Call plotting function
plotMA_arrange_iterative(res_list)
# Prep results list for predefined plotting function
res_list <- list(
"~ dex" = resLFC1,
"~ cell" = resCellLFC1,
"~ cell" = resCellLFC2,
"~ cell" = resCellLFC3,
"~ dex + cell" = resDxCLFC1,
"~ dex + cell" = resDxCLFC2,
"~ dex + cell" = resDxCLFC3,
"~ dex + cell" = resDxCLFC4
)
# Call plotting function
plotMA_arrange_iterative(res_list)
View(resDxCLFC1_DF)
# plot counts for most significant gene for treated vs untreated contract in 2 variable DGE analysis
p <- plotCounts(ddsDxC,
gene = which.min(resDxCLFC1_DF$padj),
intgroup = c("dex", "cell"),
returnData = TRUE
)
ggplot(p, aes(x = dex, y = count, color = cell)) +
geom_point(position = position_jitter(w = 0.1, h = 0.1), size = 4) +
scale_y_log10(breaks = c(25, 100, 400)) +
labs(title = rownames(resDxCLFC1_DF)[which.min(resDxCLFC1_DF$padj)])
ggplot(p, aes(x = dex, y = count, color = cell)) +
geom_point(position = position_jitter(w = 0.1, h = 0.1), size = 4) +
scale_y_log10(breaks = c(25, 100, 400)) +
labs(title = resDxCLFC1_DF$SYMBOL[which.min(resDxCLFC1_DF$padj)])
which.min(resDxCLFC1_DF$padj
resDxCLFC1_DF$SYMBOL[which.min(resDxCLFC1_DF$padj)]
ggplot(p, aes(x = dex, y = count, color = cell)) +
geom_point(position = position_jitter(w = 0.1, h = 0.1), size = 4) +
scale_y_log10(breaks = c(25, 100, 400)) +
labs(title = resDxCLFC1_DF$SYMBOL[which.min(resDxCLFC1_DF$padj)])
# plot counts for most significant gene for treated vs untreated contract in 2 variable DGE analysis
p <- plotCounts(ddsDxC,
gene = which.min(resDxC1$padj),
intgroup = c("dex", "cell"),
returnData = TRUE
)
ggplot(p, aes(x = dex, y = count, color = cell)) +
geom_point(position = position_jitter(w = 0.1, h = 0.1), size = 4) +
scale_y_log10(breaks = c(25, 100, 400)) +
labs(title = rownames(resDxC1)[which.min(resDxC1$padj)])
?plotCounts
ensembl_ids <- rownames(ddsDxC)  # Assuming 'dds' is your DESeqDataSet object
gene_symbols <- select(org.Mm.eg.db,
keys = ensembl_ids,
columns = "SYMBOL",
keytype = "ENSEMBL")
rowData(ddsDxC)$gene_symbol <- geneSetmin2
View(geneSetmin2)
rowData(ddsDxC)$gene_symbol <- geneSetmin2$SYMBOL
