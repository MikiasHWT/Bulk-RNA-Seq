hist(res05$pvalue)
qobj <- qvalue(res$pvalue)
summary(qobj)
hist(qobj)
plot(qobj)
# dds2 <- DESeqDataSetFromMatrix(
#   countData = geneCounts,
#   colData = metadata,
#   design = ~ cell_type + patient_group + cell_type:patient_group
# )
#
# dds2 <- estimateSizeFactors(dds2)
#
# keep <- rowSums(counts(dds2)) >= 10
#
# dds2 <- dds2[keep, ]
#
# dds2$patient_group <- relevel(dds2$patient_group, ref = "non_smoker")
#
# dds2 <- DESeq(dds2)
#
# resultsNames(dds2)
#
# res105 <- results(dds2, alpha = 0.1)
#
# summary(res105)
#
# sum(res105$padj < 0.1, na.rm = TRUE)
#
# hist(res105$pvalue)
#
# qobj2 <- qvalue(res105$pvalue)
#
# summary(qobj2)
#
# hist(qobj2)
#
# plot(qobj2)
# Next im curious about seeing the remaining group comparisons
# COPD vs Non-Smoker
resCOPD <- results(dds, alpha = 0.05, contrast = c("patient_group", "copd", "non_smoker"))
head(as.data.frame(resCOPD))
summary(resCOPD)
sum(resCOPD$padj < 0.05, na.rm = TRUE)
hist(resCOPD$pvalue)
qobj <- qvalue(resCOPD$pvalue)
summary(qobj)
hist(qobj)
plot(qobj)
# COPD vs Smoker
resWild <- results(dds, alpha = 0.05, contrast = c("patient_group", "copd", "smoker"))
head(as.data.frame(resWild))
summary(resWild)
sum(resWild$padj < 0.05, na.rm = TRUE)
hist(resWild$pvalue)
qobj <- qvalue(resWild$pvalue)
summary(qobj)
hist(qobj)
plot(qobj)
# Adaptive t prior shrinkage estimator
resLFC <- lfcShrink(dds,
coef = "patient_group_smoker_vs_non_smoker",
type = "apeglm"
)
# Original DESeq2 shrinkage estimator, an adaptive Normal distribution as prior.
resNorm <- lfcShrink(dds,
coef = "patient_group_smoker_vs_non_smoker",
type = "normal"
)
# Adaptive shrinkage estimator. Fits a mixture of Normal distributions to form the prior
resAsh <- lfcShrink(dds,
coef = "patient_group_smoker_vs_non_smoker",
type = "ashr"
)
# Extract differentially expressed genes
subRes05 <- subset(res, padj < 0.05)
subRes01 <- subset(res, padj < 0.01)
subRes005 <- subset(res, padj < 0.005)
# DEG05 <- subRes05@rownames
#
# DEG01 <- subRes01@rownames
#
# DEG005 <- subRes005@rownames
# counts |>
#   filter(genes %in% DEG) |>
#   ggplot(aes(x = samples, y = genes, fill = counts)) +
#   geom_tile() +
#   scale_fill_gradient(low = "white", high = "red") +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Visualize log2 fold changes of a given variable over the mean of normalized counts for all samples
res_list <- list(
"padj=0.1" = res,
"padj=0.05" = res05,
"Log fold shrunk padj=0.1" = resLFC
)
plotMA_arrange_iterative(res_list)
res_list <- list(
"Smoker vs Non_Smoker DEG's" = res,
"COPD v Non Smoker DEG's" = resCOPD,
"COPD v Smoker DEG's" = resWild
)
plotMA_arrange_iterative(res_list)
# Plot log fold shrunken DEG's
res_list <- list(
"apeglm" = resLFC,
"normal" = resNorm,
"ashr" = resAsh
)
plotMA_arrange_iterative(res_list)
# Plot log fold shrunken DEG's
res_list <- list(
"Subset 0.05" = subRes05,
"Subset 0.01" = subRes01,
"Subset 0.005" = subRes005
)
plotMA_arrange_iterative(res_list)
# Filter out low expressed genes
keep <- rowSums(geneCounts) > 10
filtCounts <- as.matrix(geneCounts[keep, ])
# Visualize gene expression values by sample
boxplot(filtCounts, main = "Raw counts", ylab = "Gene Expression", las = 2)
# Mean expression vs standard deviation (SD)
plot(rowMeans(filtCounts), rowSds(filtCounts),
main = "Raw counts: Mean vs SD",
xlim = c(0, 10000),
ylim = c(0, 5000)
)
# Save as ggplot
Raw <- ggplot(filtCounts, aes(
x = rowMeans(filtCounts),
y = rowSds(filtCounts)
)) +
geom_point() +
geom_smooth() +
labs(title = "Raw", x = "Mean", y = "SD")
# Get log2 counts
logcounts <- log2(filtCounts + 1)
# Plot mean vs SD
Log2 <- ggplot(logcounts, aes(
x = rowMeans(logcounts),
y = rowSds(logcounts)
)) +
geom_point() +
geom_smooth() +
labs(title = "Log2", x = "Mean", y = "SD")
# Variance stabilizing transformation
vst_counts <- vst(filtCounts)
# Plot
VST <- ggplot(vst_counts, aes(
x = rowMeans(vst_counts),
y = rowSds(vst_counts)
)) +
geom_point() +
geom_smooth() +
labs(title = "VST", x = "Mean", y = "SD")
# Rlog counts
rlog_counts <- rlog(filtCounts)
# Plot
Rlog <- ggplot(rlog_counts, aes(
x = rowMeans(rlog_counts),
y = rowSds(rlog_counts)
)) +
geom_point() +
geom_smooth() +
labs(title = "Rlog", x = "Mean", y = "SD")
# Arrange Plots
grid.arrange(Raw, Log2, VST, Rlog, nrow = 2)
# select <- order(rowMeans(rlog_counts), decreasing = TRUE)[1:20]
#
# df <- as.data.frame(metadata[, c("patient_group", "cell_type")])
#
# pheatmap(rlog_counts[select,], main = "rlog",
#          cluster_rows = TRUE, show_rownames = TRUE,
#          cluster_cols = TRUE, show_colnames = FALSE)
# Variance stabilizing transformation. (log2 scaling for large counts)
vsd <- vst(dds, blind = FALSE)
rld <- rlog(dds, blind = FALSE)
ntd <- normTransform(dds)
#
# meanSdPlot(assay(ntd))
#
# meanSdPlot(assay(vsd))
#
# meanSdPlot(assay(rld))
select <- order(rowMeans(counts(dds, normalized = TRUE)),
decreasing = TRUE
)[1:20]
df <- as.data.frame(colData(dds)[, c("patient_group", "cell_type")])
pheatmap(assay(ntd)[select, ],
cluster_rows = TRUE, show_rownames = TRUE,
cluster_cols = TRUE, annotation_col = df, show_colnames = FALSE,
main = "ntd", scale = "row"
)
pheatmap(assay(vsd)[select, ],
cluster_rows = TRUE, show_rownames = TRUE,
cluster_cols = TRUE, annotation_col = df, show_colnames = FALSE,
main = "vsd", scale = "row"
)
pheatmap(assay(rld)[select, ],
cluster_rows = TRUE, show_rownames = TRUE,
cluster_cols = TRUE, annotation_col = df, show_colnames = FALSE,
main = "rld", scale = "row"
)
# Determine between group variety
sampleDists <- dist(t(assay(vsd)))
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(vsd$cell_type, vsd$patient_group, sep = "-")
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette(rev(brewer.pal(9, "Blues")))(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
col = colors
)
plotPCA(vsd, intgroup = c("cell_type", "patient_group"))
plotPCA(vsd, intgroup = c("cell_type"))
pcaData <- plotPCA(vsd,
intgroup = c("cell_type", "patient_group"),
returnData = TRUE
)
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(PC1, PC2, color = patient_group, shape = cell_type)) +
geom_point(size = 3) +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
coord_fixed()
# Plot the gene with the smallest p adj value across specified groupings
c1 <- plotCounts(dds, gene = which.min(res$padj), intgroup = c("cell_type"), returnData = TRUE)
c1_plot <- ggplot(c1, aes(x = cell_type, y = count)) +
geom_point(position = position_jitter(w = 0.1, h = 0)) +
scale_y_log10(breaks = c(25, 100, 400))
c2 <- plotCounts(dds, gene = which.min(res$padj), intgroup = c("patient_group"), returnData = TRUE)
c2_plot <- ggplot(c2, aes(x = patient_group, y = count)) +
geom_point(position = position_jitter(w = 0.1, h = 0)) +
scale_y_log10(breaks = c(25, 100, 400))
c3 <- plotCounts(dds, gene = which.min(res$padj), intgroup = c("cell_type", "patient_group"), returnData = TRUE)
c3_plot <- ggplot(c3, aes(x = patient_group, y = count, color = cell_type)) +
geom_point(position = position_jitter(w = 0.1, h = 0)) +
scale_y_log10(breaks = c(25, 100, 400))
gridExtra::grid.arrange(c1_plot, c2_plot, c3_plot, nrow = 2)
# plot chosen genes per chosen conditions
plotCounts(dds, gene = which.min(res$padj), intgroup = "patient_group")
plotCounts(dds, gene = which.min(res$padj), intgroup = c("patient_group", "cell_type"))
# Next Analysis: Enrichment/Over-representation analysis
https://yulab-smu.top/biomedical-knowledge-mining-book/index.html
library(org.Mm.eg.db)
BiocManager::install(c("org.Mm.eg.db", "DOSE", "pathview", "clusterProfiler", "AnnotationHub", "ensembldb"))
library(org.Mm.eg.db)
library(DOSE)
library(pathview)
library(clusterProfiler) # over representation/gene enrichment
library(AnnotationHub)
library(ensembldb)
# Create background dataset for hypergeometric testing using all genes tested for significance in the results
all_genes <- as.character(rownames(res))
# Extract significant results
signif_res <- res[res$padj < 0.05 & !is.na(res$padj), ]
View(signif_res)
signif_genes <- as.character(rownames(signif_res))
styler:::style_active_file()
# Run GO enrichment analysis
ego <- enrichGO(
gene = signif_genes,
universe = all_genes,
keyType = "ENSEMBL",
OrgDb = org.Mm.eg.db,
ont = "BP",
pAdjustMethod = "BH",
qvalueCutoff = 0.05,
readable = TRUE
)
?enrichGO
# Run GO enrichment analysis
ego <- enrichGO(
gene = signif_genes,
universe = all_genes,
OrgDb = org.Mm.eg.db,
ont = "BP",
pAdjustMethod = "BH",
qvalueCutoff = 0.05,
readable = TRUE
)
# Run GO enrichment analysis
ego <- enrichGO(
gene = signif_genes,
universe = all_genes,
keyType = "SYMBOL",
OrgDb = org.Mm.eg.db,
ont = "BP",
pAdjustMethod = "BH",
qvalueCutoff = 0.05,
readable = TRUE
)
BiocManager::install("org.Hs.eg.db")
library(org.Hs.eg.db) # Human database
# Run GO enrichment analysis
ego <- enrichGO(
gene = signif_genes,
universe = all_genes,
keyType = "SYMBOL",
OrgDb = org.Hs.eg.db,
ont = "BP",
pAdjustMethod = "BH",
qvalueCutoff = 0.05,
readable = TRUE
)
View(ego)
View(ego)
# Output results from GO analysis to a table
cluster_summary <- data.frame(ego)
View(cluster_summary)
View(cluster_summary)
# Visualize
dotplot(ego, showCategory = 50)
emapplot(ego, showCategory = 50)
# Calculate term similarity matrix
sim_matrix <- pairwise_termsim(ego)
library(DOSE)
# Calculate term similarity matrix
sim_matrix <- pairwise_termsim(ego)
# Plot enrichment map
emapplot(ego, showCategory = 50, pvalueCutoff = 0.05)
?emapplot
# Calculate term similarity matrix
sim_matrix <- pairwise_termsim(ego)
# To color genes by log2 fold changes
signif_res_lFC <- signif_res$log2FoldChange
cnetplot(ego,
categorySize = "pvalue",
showCategory = 5,
foldChange = signif_res_lFC,
vertex.label.font = 6
)
# Plot enrichment map
emapplot(ego, showCategory = 50, pvalueCutoff = 0.05)
# Plot enrichment map
emapplot(ego, showCategory = 50, sim_matrix = sim_matrix)
?pairwise_termsim
library(enrichplot)
# Plot enrichment map
emapplot(ego, showCategory = 50)
term_sim_matrix <- pairwise_termsim(ego)
emapplot(ego, showCategory = 50, sim_matrix = term_sim_matrix)
# Calculate term similarity matrix
sim_matrix <- pairwise_termsim(ego)
# Plot enrichment map
emapplot(ego, showCategory = 50, sim_matrix = sim_matrix)
cnetplot(ego,
categorySize = "pvalue",
showCategory = 5,
foldChange = signif_res_lFC,
vertex.label.font = 6
)
# Gene set enrichment analysis (GSEA) using clusterProfiler and Pathview
mart <- useDataset("mmusculus_gene_ensembl", useMart("ensembl"))
library(pathview)
# Gene set enrichment analysis (GSEA) using clusterProfiler and Pathview
mart <- useDataset("mmusculus_gene_ensembl", useMart("ensembl"))
?useDataset
# Gene set enrichment analysis (GSEA) using clusterProfiler and Pathview
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
# Gene set enrichment analysis (GSEA) using clusterProfiler and Pathview
useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
library(biomaRt)
library(biomaRt)
# Gene set enrichment analysis (GSEA) using clusterProfiler and Pathview
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
genes <- getBM(
filters = "SYMBOL",
attributes = c("SYMBOL"),
values = all_genes,
mart = mart
)
genes <- getBM(
filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id", "entrezgene_id"),
values = all_genes,
mart = mart
)
indNA <- which(is.na(genes$entrezgene_id))
genes <- getBM(
filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id", "entrezgene_id"),
values = all_genes,
mart = mart
)
genes <- getBM(
filters = "hgnc_symbol",
attributes = c("hgnc_symbol", "entrezgene_id"),
values = all_genes,
mart = mart
)
genes <- getBM(
filters = "hsapiens_gene_ensembl",
attributes = c("hsapiens_gene_ensembl", "entrezgene_id"),
values = all_genes,
mart = mart
)
genes <- getBM(
filters = "hsapiens_gene_ensembl",
attributes = c("hsapiens_gene_ensembl", "SYMBOL"),
values = all_genes,
mart = mart
)
# Gene set enrichment analysis (GSEA) using clusterProfiler and Pathview
mart <- useDataset("hsapiens_gene_ensembl", useMart("SYMBOL"))
listMarts()
?listMarts
if(interactive()){
listMarts()
}
genes <- getBM(
filters = "hsapiens_gene_ensembl",
attributes = c("hsapiens_gene_ensembl", "ensembl"),
values = all_genes,
mart = mart
)
?getBM
# Gene set enrichment analysis (GSEA) using clusterProfiler and Pathview
mart <- useDataset("SYMBOL", useMart("ensembl"))
genes <- getBM(
filters = "SYMBOL",
attributes = c("hsapiens_gene_ensembl", "ensembl"),
values = all_genes,
mart = mart
)
genes <- getBM(
filters = "hsapiens_gene_ensembl",
attributes = c("SYMBOL", "ensembl"),
values = all_genes,
mart = mart
)
genes <- getBM(
filters = "hsapiens_gene_ensembl",
attributes = c("hsapiens_gene_ensembl", "SYMBOL"),
values = all_genes,
mart = mart
)
genes <- getBM(
filters = "hsapiens_gene_ensembl",
attributes = c("hsapiens_gene_ensembl"),
values = all_genes,
mart = mart
)
mart2 <- useEnsembl(biomart = "ensembl",
dataset = "hsapiens_gene_ensembl")
genes <- getBM(
filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id", "ensembl"),
values = all_genes,
mart = mart
)
indNA <- which(is.na(genes$entrezgene_id))
genes <- getBM(
filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id", "ensembl"),
values = all_genes,
mart = mart
)
genes <- getBM(
filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id", "entrezgene_id"),
values = all_genes,
mart = mart
)
View(mart)
mart@filters[["NA"]]
mart@filters[["NA"]]
genes <- getBM(
filters = "hsapiens_gene_ensembl_gene_main",
attributes = c("hsapiens_gene_ensembl_gene_main", "entrezgene_id"),
values = all_genes,
mart = mart
)
genes <- getBM(
filters = "hsapiens_gene_ensembl_gene_main",
attributes = c("hsapiens_gene_ensembl_gene_main", "ensembl_gene_id"),
values = all_genes,
mart = mart
)
genes <- getBM(
filters = "hsapiens_gene_ensembl_gene_main",
attributes = "hsapiens_gene_ensembl_gene_main",
values = all_genes,
mart = mart
)
genes <- getBM(
filters = "chromosome_name",
attributes = "hsapiens_gene_ensembl_gene_main",
values = all_genes,
mart = mart
)
genes <- getBM(
filters = "chromosome_name",
attributes = "ensembl_gene_id",
values = all_genes,
mart = mart
)
genes <- getBM(
filters = "chromosome_name",
attributes = "ensembl_gene_id",
values = signif_genes,
mart = mart
)
mart <- useEnsembl(biomart = "ensembl",
dataset = "hsapiens_gene_ensembl")
mart <- useEnsembl(biomart = "SYMBOL",
dataset = "hsapiens_gene_ensembl")
# Remove genes column (gene names retained as index)
# Assign to new df to retain genes column for later data exploration
geneCounts <- counts |>
select(-genes)
