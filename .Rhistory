geneSetmin = bitr(geneSetmin,
fromType="UNIPROT",
toType="ENTREZID",
OrgDb="org.Hs.eg.db")
valid_symbols <- keys(org.Hs.eg.db, keytype = "SYMBOL")
head(valid_symbols)
invalid_genes <- setdiff(geneSetmin$SYMBOL, valid_symbols)
conflicts_prefer(base::setdiff)
invalid_genes <- setdiff(geneSetmin$SYMBOL, valid_symbols)
head(invalid_genes)
print(invalid_genes)
geneSetmin <- geneSetmin |>
filter(SYMBOL %in% valid_symbols)
# Translate gene Symbol to Entrez ID
geneSetmin = bitr(geneSetmin,
fromType="UNIPROT",
toType="ENTREZID",
OrgDb="org.Hs.eg.db")
# Translate gene Symbol to Entrez ID
geneSetmin = bitr(geneSetmin,
fromType="SYMBOL",
toType="ENTREZID",
OrgDb="org.Hs.eg.db")
# Setup ranked genelist
geneSet <- as.data.frame(signif_res)
geneSetmin <- geneSet %>%
select(log2FoldChange) %>%
arrange(desc(log2FoldChange)) %>%
mutate(SYMBOL = row.names(.)) %>%
select(SYMBOL, everything())
valid_symbols <- keys(org.Hs.eg.db, keytype = "SYMBOL")
geneSetmin <- geneSetmin |>
filter(SYMBOL %in% valid_symbols)
# Translate gene Symbol to Entrez ID
geneSetmin = bitr(geneSetmin,
fromType="SYMBOL",
toType="ENTREZID",
OrgDb="org.Hs.eg.db")
invalid_genes <- setdiff(geneSetmin$SYMBOL, valid_symbols)
library(org.Hs.eg.db) # Human database
# Translate gene Symbol to Entrez ID
geneSetmin = bitr(geneSetmin,
fromType="SYMBOL",
toType="ENTREZID",
OrgDb="org.Hs.eg.db")
# Translate gene Symbol to Entrez ID
geneSetmin2 = bitr(geneSetmin,
fromType="SYMBOL",
toType="ENTREZID",
OrgDb="org.Hs.eg.db")
geneSetmin <- geneSetmin |>
filter(SYMBOL %in% valid_symbols) |>
select(log2FoldChange)
# Translate gene Symbol to Entrez ID
geneSetmin2 = bitr(geneSetmin,
fromType="SYMBOL",
toType="ENTREZID",
OrgDb="org.Hs.eg.db")
invalid_genes <- setdiff(geneSetmin$SYMBOL, valid_symbols)
print(invalid_genes)
keys(org.Hs.eg.db)
keytypes(org.Hs.eg.db)
# Translate gene Symbol to Entrez ID
geneSetmin2 = bitr(geneSetmin,
fromType="GENENAME",
toType="ENTREZID",
OrgDb="org.Hs.eg.db")
# Translate gene Symbol to Entrez ID
geneSetmin2 = bitr(geneSetmin,
fromType="SYMBOL",
toType="ENTREZID",
OrgDb="org.Hs.eg.db")
BiocManager::install("org.Hs.eg.db")
library(org.Hs.eg.db)
keys(org.Hs.eg.db)
keytypes(org.Hs.eg.db)
# Translate gene Symbol to Entrez ID
geneSetmin2 = bitr(geneSetmin,
fromType="SYMBOL",
toType="ENTREZID",
OrgDb="org.Hs.eg.db")
?bitr
# Translate gene Symbol to Entrez ID
geneSetmin2 = bitr(geneSetmin,
fromType="SYMBOL",
toType="ENTREZID",
OrgDb="org.Hs.eg.db",
drop = FALSE)
library(clusterProfiler)
# Translate gene Symbol to Entrez ID
geneSetmin2 = bitr(geneSetmin,
fromType="SYMBOL",
toType="ENTREZID",
OrgDb="org.Hs.eg.db")
geneSetmin <- geneSet %>%
select(log2FoldChange) %>%
arrange(desc(log2FoldChange)) %>%
mutate(SYMBOL = row.names(.)) %>%
select(SYMBOL, everything())
valid_symbols <- keys(org.Hs.eg.db, keytype = "SYMBOL")
invalid_genes <- setdiff(geneSetmin$SYMBOL, valid_symbols)
geneSetmin <- geneSetmin |>
filter(SYMBOL %in% valid_symbols)
# Translate gene Symbol to Entrez ID
geneSetmin2 = bitr(geneSetmin,
fromType="SYMBOL",
toType="ENTREZID",
OrgDb="org.Hs.eg.db")
# Translate gene Symbol to Entrez ID
geneSetmin2 = bitr(geneSetmin$SYMBOL,
fromType="SYMBOL",
toType="ENTREZID",
OrgDb="org.Hs.eg.db")
View(geneSetmin2)
geneSetmin <- geneSet %>%
select(log2FoldChange) %>%
arrange(desc(log2FoldChange)) %>%
mutate(SYMBOL = row.names(.)) %>%
select(SYMBOL, everything())
valid_symbols <- keys(org.Hs.eg.db, keytype = "SYMBOL")
invalid_genes <- setdiff(geneSetmin$SYMBOL, valid_symbols)
print(invalid_genes)
geneSetmin <- geneSetmin |>
filter(SYMBOL %in% valid_symbols) |>
select(log2FoldChange)
# Translate gene Symbol to Entrez ID
geneSetmin2 = bitr(geneSetmin,
fromType="SYMBOL",
toType="ENTREZID",
OrgDb="org.Hs.eg.db")
geneSetmin <- geneSet %>%
select(log2FoldChange) %>%
arrange(desc(log2FoldChange)) %>%
mutate(SYMBOL = row.names(.)) %>%
select(SYMBOL, everything())
geneSetmin <- geneSet %>%
select(log2FoldChange) %>%
arrange(desc(log2FoldChange)) %>%
mutate(SYMBOL = row.names(.)) %>%
select(SYMBOL, everything())
valid_symbols <- keys(org.Hs.eg.db, keytype = "SYMBOL")
valid_symbols <- keys(org.Hs.eg.db, keytype = "SYMBOL")
invalid_genes <- setdiff(geneSetmin$SYMBOL, valid_symbols)
geneSetmin <- geneSetmin |>
filter(SYMBOL %in% valid_symbols)
# Translate gene Symbol to Entrez ID
geneSetmin2 = bitr(geneSetmin,
fromType="SYMBOL",
toType="ENTREZID",
OrgDb="org.Hs.eg.db")
# Translate gene Symbol to Entrez ID
geneSetmin2 = bitr(geneSetmin$SYMBOL,
fromType="SYMBOL",
toType="ENTREZID",
OrgDb="org.Hs.eg.db")
geneSetFinal <- geneSetmin |>
full_join(geneSetmin2, by = "SYMBOL")
View(geneSetFinal)
counts <- countsLong |>
left_join(metadata, by = c("samples" = "samples")) |>
select(SYMBOL, ENTREZID, log2FoldChange)
geneSetFinal <- geneSetmin |>
full_join(geneSetmin2, by = "SYMBOL") |>
select(SYMBOL, ENTREZID, log2FoldChange)
# Entrez gene ID
head(gene)
# Formula interface of compareCluster
# compareCluster() function also supports passing a formula to describe more complicated experimental designs
mydf <- data.frame(Entrez = geneSetFinal$ENTREZID, FC = geneSetFinal$log2FoldChange)
View(mydf)
mydf <- mydf[abs(mydf$FC) > 1, ]
mydf$group <- "upregulated"
View(mydf)
mydf$group[mydf$FC < 0] <- "downregulated"
mydf$othergroup <- "A"
mydf$othergroup[abs(mydf$FC) > 2] <- "B"
formula_res <- compareCluster(Entrez ~ group + othergroup,
data = mydf,
fun = "enrichKEGG"
)
head(formula_res)
dotplot(formula_res)
dotplot(formula_res, x = "group") +
facet_grid(~othergroup)
dotplot(formula_res, x = "group") +
facet_grid(~othergroup)
mydf$othergroup <- "Equal"
mydf$othergroup[abs(mydf$FC) > 2] <- "Doubled"
mydf$othergroup <- "One Fold"
mydf$othergroup[abs(mydf$FC) > 2] <- "Two Fold"
formula_res <- compareCluster(Entrez ~ group + othergroup,
data = mydf,
fun = "enrichKEGG"
)
head(formula_res)
# Formula interface of compareCluster
# compareCluster() function also supports passing a formula to describe more complicated experimental designs
mydf <- data.frame(Entrez = geneSetFinal$ENTREZID, FC = geneSetFinal$log2FoldChange)
mydf$group <- "upregulated"
mydf$group[mydf$FC < 0] <- "downregulated"
mydf$othergroup <- "One Fold"
mydf$othergroup[abs(mydf$FC) > 2] <- "Two Fold"
formula_res <- compareCluster(Entrez ~ group + othergroup,
data = mydf,
fun = "enrichKEGG"
)
head(formula_res)
dotplot(formula_res)
dotplot(formula_res, x = "group") +
facet_grid(~othergroup)
head(formula_res)
# Comparing multiple gene lists
data(gcSample)
str(gcSample)
View(gcSample)
gcSample
head(all_genes)
all_genesCOPD <- as.character(rownames(resCOPD))
all_genesWILD <- as.character(rownames(resWILD))
all_genesWILD <- as.character(rownames(resWild))
signif_resCOPD <- resCOPD[resCOPD$padj < 0.05 & !is.na(resCOPD$padj), ]
signif_resWild <- resWild[resWild$padj < 0.05 & !is.na(resWild$padj), ]
signif_res <- res[res$padj < 0.05 & !is.na(res$padj), ]
geneSetCOPD <- as.data.frame(signif_resCOPD)
geneSetWild <- as.data.frame(signif_resWild)
geneSetmin <- geneSet %>%
select(log2FoldChange) %>%
arrange(desc(log2FoldChange)) %>%
mutate(SYMBOL = row.names(.)) %>%
select(SYMBOL, everything())
geneSetminCOPD <- geneSetCOPD %>%
select(log2FoldChange) %>%
arrange(desc(log2FoldChange)) %>%
mutate(SYMBOL = row.names(.)) %>%
select(SYMBOL, everything())
geneSetminWild <- geneSetWild %>%
select(log2FoldChange) %>%
arrange(desc(log2FoldChange)) %>%
mutate(SYMBOL = row.names(.)) %>%
select(SYMBOL, everything())
geneSetmin <- geneSetmin |>
filter(SYMBOL %in% valid_symbols)
geneSetminCOPD <- geneSetminCOPD |>
filter(SYMBOL %in% valid_symbols)
geneSetminWild <- geneSetminWild |>
filter(SYMBOL %in% valid_symbols)
# Translate gene Symbol to Entrez ID
geneSetmin2 = bitr(geneSetmin$SYMBOL,
fromType="SYMBOL",
toType="ENTREZID",
OrgDb="org.Hs.eg.db")
geneSetmin2 = bitr(geneSetminCOPD$SYMBOL,
fromType="SYMBOL",
toType="ENTREZID",
OrgDb="org.Hs.eg.db")
geneSetmin2 = bitr(geneSetminWild$SYMBOL,
fromType="SYMBOL",
toType="ENTREZID",
OrgDb="org.Hs.eg.db")
geneSetminCOPD2 = bitr(geneSetminCOPD$SYMBOL,
fromType="SYMBOL",
toType="ENTREZID",
OrgDb="org.Hs.eg.db")
geneSetmin2WILD2 = bitr(geneSetminWild$SYMBOL,
fromType="SYMBOL",
toType="ENTREZID",
OrgDb="org.Hs.eg.db")
# Translate gene Symbol to Entrez ID
geneSetmin2 = bitr(geneSetmin$SYMBOL,
fromType="SYMBOL",
toType="ENTREZID",
OrgDb="org.Hs.eg.db")
geneSetmin <- geneSetmin |>
filter(SYMBOL %in% valid_symbols)
geneSetminCOPD <- geneSetminCOPD |>
filter(SYMBOL %in% valid_symbols)
geneSetminWild <- geneSetminWild |>
filter(SYMBOL %in% valid_symbols)
# Translate gene Symbol to Entrez ID
geneSetmin2 = bitr(geneSetmin$SYMBOL,
fromType="SYMBOL",
toType="ENTREZID",
OrgDb="org.Hs.eg.db")
# Translate gene Symbol to Entrez ID
geneSetmin2 = bitr(geneSetmin$SYMBOL,
fromType="SYMBOL",
toType="ENTREZID",
OrgDb="org.Hs.eg.db")
geneSetminCOPD2 = bitr(geneSetminCOPD$SYMBOL,
fromType="SYMBOL",
toType="ENTREZID",
OrgDb="org.Hs.eg.db")
geneSetminCOPD2 = bitr(geneSetminCOPD$SYMBOL,
fromType="SYMBOL",
toType="ENTREZID",
OrgDb="org.Hs.eg.db")
geneSetmin2WILD2 = bitr(geneSetminWild$SYMBOL,
fromType="SYMBOL",
toType="ENTREZID",
OrgDb="org.Hs.eg.db")
geneSetFinal <- geneSetmin |>
full_join(geneSetmin2, by = "SYMBOL") |>
select(SYMBOL, ENTREZID, log2FoldChange)
geneSetFinalCOPD <- geneSetminCOPD |>
full_join(geneSetminCOPD2, by = "SYMBOL") |>
select(SYMBOL, ENTREZID, log2FoldChange)
geneSetFinalWild <- geneSetminWild |>
full_join(geneSetmin2WILD2, by = "SYMBOL") |>
select(SYMBOL, ENTREZID, log2FoldChange)
View(geneSetFinalCOPD)
View(geneSetFinalWild)
View(geneSetFinal)
type(gcSample)
column_list <- list(pull(geneSetFinal, ENTREZID),
pull(geneSetFinalCOPD, ENTREZID),
pull(geneSetFinalWild, ENTREZID))
View(column_list)
ck <- compareCluster(geneCluster = column_list, fun = enrichKEGG)
typeof(column_list)
ck <- compareCluster(geneCluster = column_list, fun = enrichKEGG)
ck <- setReadable(ck, OrgDb = org.Hs.eg.db, keyType = "ENTREZID")
ck <- compareCluster(geneCluster = column_list, fun = enrichKEGG)
ck <- setReadable(ck, OrgDb = org.Hs.eg.db, keyType = "ENTREZID")
head(ck)
View(ck)
?compareCluster
ck <- compareCluster(geneCluster = column_list, fun = groupGO)
ck <- compareCluster(geneCluster = column_list, fun = enrichGO)
ck <- compareCluster(geneCluster = column_list, fun = enrichDO)
ck <- compareCluster(geneCluster = column_list, fun = enrichPathway)
ck <- compareCluster(geneCluster = column_list, fun = enrichKEGG)
str(gcSample)
column_list2 <- list(geneSetFinal$ENTREZID,
geneSetFinalCOPD$ENTREZID,
geneSetFinalWild$ENTREZID)
View(column_list2)
# Comparing multiple gene lists
data(gcSample)
str(gcSample)
column_list2[[1]]
column_list2[["x2"]] <- column_list2[[2]]
column_list2[["x1"]] <- column_list2[[1]]
column_list2[["x2"]] <- column_list2[[2]]
column_list2[["x3"]] <- column_list2[[3]]
column_list2 <- list(geneSetFinal$ENTREZID,
geneSetFinalCOPD$ENTREZID,
geneSetFinalWild$ENTREZID)
column_list2[["x1"]] <- column_list2[[1]]
column_list2[["x2"]] <- column_list2[[2]]
column_list2[["x3"]] <- column_list2[[3]]
column_list2 <- column_list2 |>
select(x1, x2, x3)
# Columns to select
columns_to_select <- c("x1", "x2", "x3")
# Select specific columns from each data frame within the list
column_list2 <- map(column_list2, ~ select(.x, one_of(columns_to_select)))
# Columns to select
columns_to_select <- c("x1", "x2", "x3")
# Select specific columns from each data frame within the list
column_list2 <- lapply(column_list2, function(df) df[, columns_to_select, drop = FALSE])
# Columns to select
columns_to_select <- c("x1", "x2", "x3")
# Select specific columns from each data frame within the list
column_list2 <- lapply(column_list2, function(df) df[, columns_to_select, drop = FALSE])
sublist = column_list2[3:6]
View(sublist)
sublist = column_list2[4:6]
ck <- compareCluster(geneCluster = column_list2, fun = enrichKEGG)
column_list2 = column_list2[4:6]
ck <- compareCluster(geneCluster = column_list2, fun = enrichKEGG)
ck <- setReadable(ck, OrgDb = org.Hs.eg.db, keyType = "ENTREZID")
head(ck)
# Visualization of functional profile comparison
dotplot(ck)
# Gene-Concept Network
cnetplot(ck)
column_list2 <- list(geneSetFinal$ENTREZID,
geneSetFinalCOPD$ENTREZID)
ck <- compareCluster(geneCluster = column_list2, fun = enrichKEGG)
column_list2[["x1"]] <- column_list2[[1]]
column_list2[["x2"]] <- column_list2[[2]]
column_list2 = column_list2[3:]
column_list2 = column_list2[3:4]
ck <- compareCluster(geneCluster = column_list2, fun = enrichKEGG)
ck <- setReadable(ck, OrgDb = org.Hs.eg.db, keyType = "ENTREZID")
head(ck)
# Visualization of functional profile comparison
dotplot(ck)
column_list2[["Smoker vs Healthy"]] <- column_list2[[1]]
column_list2[["COPD vs Healthy"]] <- column_list2[[2]]
column_list2 = column_list2[3:4]
ck <- compareCluster(geneCluster = column_list2, fun = enrichKEGG)
ck <- setReadable(ck, OrgDb = org.Hs.eg.db, keyType = "ENTREZID")
head(ck)
# Gene-Concept Network
cnetplot(formula_res)
# Visualization of functional profile comparison
dotplot(ck)
# Gene-Concept Network
cnetplot(ck)
# Bar Plot
data(geneSetFinal)
de <- names(geneSetFinal)[abs(geneSetFinal) > 2]
de <- names(geneSetFinal)[abs(geneSetFinal$log2FoldChange) > 2]
View(geneSet)
data(geneList)
data(geneList)
View(geneSetFinal)
de <- names(geneList)[abs(geneList) > 2]
de <- geneSetFinal |>
select(ENTREZID, log2FoldChange) |>
filter(abs(log2FoldChange) > 2)
View(de)
de <- as.character(de$ENTREZID)
edo <- enrichDGN(de)
barplot(edo, showCategory = 20)
barplot(edo, showCategory = 20)
mutate(edo, qscore = -log(p.adjust, base = 10)) |>
barplot(x = "qscore")
typeof(geneList)
de2 <- geneSetFinal |>
select(ENTREZID, log2FoldChange) |>
filter(abs(log2FoldChange) > 2)
View(de2)
rownames(de2) <- de2$ENTREZID
de3 <- de2 |>
select(-ENTREZID)
de3 <- as.double(de3)
# Dot plot
edo2 <- gseDO(de3)
view(geneList)
View(de3)
de3 <- de3 |>
multate(x = log2FoldChange)
de3 <- de3 |>
mutate(x = log2FoldChange)
de3 <- de3 |>
mutate(x = log2FoldChange) |>
select(-log2FoldChange)
de3 <- as.double(de3)
# Dot plot
edo2 <- gseDO(de3)
?gseDO
class(geneList)
class(de3)
de3 <- as.numeric(de3)
de3 <- as.numeric(de3$x)
class(de3)
# Dot plot
edo2 <- gseDO(de3)
de3$x <- as.numeric(de3$x)
de3 <- de2 |>
select(-ENTREZID)
de3 <- de3 |>
mutate(x = log2FoldChange) |>
select(-log2FoldChange)
de3$x <- as.numeric(de3$x)
class(de3)
View(de3)
# Dot plot
edo2 <- gseDO(de3)
class(geneList)
view(geneList)
class(de3)
class(geneList)
de3 <- as.matrix(de3)
class(de3)
install.packages("bigmemory")
install.packages("bigalgebra")
library(bigmemory)
library(bigalgebra)
large_numeric_matrix <- as.big.matrix(de3)
class(large_numeric_matrix)
class(geneList)
head(geneList)
class(de3)
de3 <- de2 |>
select(-ENTREZID)
de3 <- de3 |>
mutate(x = log2FoldChange) |>
select(-log2FoldChange)
class(geneList)
head(geneList)
class(de3)
head(de3)
head(de3)
geneListNew <- as.numeric(unlist(de3))
# Dot plot
edo2 <- gseDO(geneListNew)
rownames(de2) <- de2$ENTREZID
geneListNew <- as.numeric(unlist(de2))
class(geneListNew)
# Dot plot
edo2 <- gseDO(geneListNew)
head(geneList)
head(geneListNew)
geneListNew <- as.numeric(unlist(de2$log2FoldChange))
geneListNew <- as.numeric(unlist(de2$log2FoldChange), de2$ENTREZID)
geneListNew <- as.numeric(unlist(de2))
nameVector <- de2$ENTREZID
combined <- list(names = de2$ENTREZID, values = de2$log2FoldChange)
class(combined)
combined <- as.numeric(list(names = de2$ENTREZID, values = de2$log2FoldChange))
combined <- as.numeric(names = de2$ENTREZID, values = de2$log2FoldChange
combined <- as.numeric(names = de2$ENTREZID, values = de2$log2FoldChange)
combined <- as.numeric(names = de2$ENTREZID, values = de2$log2FoldChange)
combined <- as.numeric(de2$ENTREZID, de2$log2FoldChange)
class(combined)
# Dot plot
edo2 <- gseDO(combined)
combined <- as.numeric(de2$ENTREZID & de2$log2FoldChange)
combined <- as.numeric(de2$ENTREZID, de2$log2FoldChange)
